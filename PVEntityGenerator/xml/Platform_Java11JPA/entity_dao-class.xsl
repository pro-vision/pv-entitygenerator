<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  version="1.0"
>

<xsl:import href="platform_defaults.xsl"/>

<xsl:output method="text" encoding="UTF-8"/>


<xsl:template match="/">
  <xsl:apply-templates select="$db-definition/entities/entity[@name=$entity]"/>
</xsl:template>



<!-- ***** Class File generieren ***** -->
<xsl:template match="entity">
<xsl:if test="$generate-entity/parameters/parameter[@name='generate-entity']='true'
    and $generate-entity/parameters/parameter[@name='generate-home']='true'">

  <!-- File Header, package, import statements -->
  <xsl:value-of select="$platform/parameters/parameter[@name='file-header']"/>
  <xsl:if test="$generate-checkstyle-suppress-comments">
    <xsl:text>//CHECKSTYLE:OFF
</xsl:text>
  </xsl:if>
  <xsl:text>
package </xsl:text><xsl:value-of select="$platform/parameters/parameter[@name='dao-package']"/><xsl:text>;

import javax.persistence.*;

import </xsl:text><xsl:value-of select="$platform/parameters/parameter[@name='entity-package']"/><xsl:text>.*;

</xsl:text>

  <!-- Class-Kommentar -->
  <xsl:if test="$generate-comments">
    <xsl:text>/**
</xsl:text>
      <xsl:text> * </xsl:text><xsl:value-of select="@description"/><xsl:text>&lt;br/&gt;
</xsl:text>
    <xsl:text> * The class &lt;code&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>DAO&lt;/code&gt; provides methods for creating and fetching entities from the table &lt;i&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/i&gt;.
 * @author Generated by PVEntityGenerator
 */
</xsl:text>
  </xsl:if>

  <!-- Class Beginn -->
  <xsl:if test="$generate-spring-annotations">
    <xsl:text>@org.springframework.stereotype.Repository
</xsl:text>
  </xsl:if>
  <xsl:text>public class </xsl:text><xsl:value-of select="$entity"/><xsl:text>DAO</xsl:text>
  <xsl:if test="$platform/parameters/parameter[@name='dao-superclass']!=''">
    <xsl:text> extends </xsl:text><xsl:value-of select="$platform/parameters/parameter[@name='dao-superclass']"/>
    <xsl:text>&lt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&gt; </xsl:text>
  </xsl:if>
  <xsl:text>{

  @PersistenceContext
  private EntityManager mEntityManager;

</xsl:text>

  <xsl:for-each select="key('foreign-key-cascading-delete', $entity)">
    <xsl:variable name="check-skip-onetomany">
      <xsl:apply-templates select="." mode="check-skip-onetomany"/>
    </xsl:variable>
    <xsl:if test="$check-skip-onetomany='true'">
      <xsl:if test="$generate-spring-annotations">
        <xsl:text>  @org.springframework.beans.factory.annotation.Autowired
</xsl:text>
      </xsl:if>
      <xsl:text>  private </xsl:text><xsl:value-of select="../../@name"/><xsl:text>DAO m</xsl:text><xsl:value-of select="../../@name"/><xsl:text>DAO;

</xsl:text>
    </xsl:if>
  </xsl:for-each>



  <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Constructor
   */
</xsl:text>
  </xsl:if>
  <xsl:text>  public </xsl:text><xsl:value-of select="$entity"/><xsl:text>DAO() {
    // empty constructor
  }

</xsl:text>
    <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Constructor
   * @param pEntityManager Entity manager
   */
</xsl:text>
  </xsl:if>
  <xsl:text>  public </xsl:text><xsl:value-of select="$entity"/><xsl:text>DAO(EntityManager pEntityManager) {
    mEntityManager = pEntityManager;
</xsl:text>
  <xsl:for-each select="key('foreign-key-cascading-delete', $entity)">
    <xsl:variable name="check-skip-onetomany">
      <xsl:apply-templates select="." mode="check-skip-onetomany"/>
    </xsl:variable>
    <xsl:if test="$check-skip-onetomany='true'">
      <xsl:text>    m</xsl:text><xsl:value-of select="../../@name"/><xsl:text>DAO = new </xsl:text><xsl:value-of select="../../@name"/><xsl:text>DAO(pEntityManager);
</xsl:text>
    </xsl:if>
  </xsl:for-each>
  <xsl:text>  }

  @Override
  protected EntityManager getEntityManager() {
    return mEntityManager;
  }

  @Override
  public Class&lt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&gt; getEntityBeanType() {
    return </xsl:text><xsl:value-of select="$entity"/><xsl:text>.class;
  }

</xsl:text>

  <!-- validation -->
  <xsl:apply-templates select="." mode="validation"/>

  <!-- remove checks/cascading deletes -->
  <xsl:apply-templates select="." mode="remove-check"/>
  <xsl:apply-templates select="." mode="cascading-delete"/>

  <!-- foreign key dependent find methods -->
  <xsl:apply-templates select="." mode="find-foreign-key"/>

  <!-- custom find methods -->
  <xsl:apply-templates select="." mode="find-custom"/>

  <!-- Placeholder for manual class extensions -->
  <xsl:if test="$generate-checkstyle-suppress-comments">
    <xsl:text>//CHECKSTYLE:ON
</xsl:text>
  </xsl:if>
  <xsl:text>//+++ Custom class extensions START +++
// To prevent deleting your changes from PVEntityGenerator put your manual class extensions only here

//+++ Custom class extensions END +++
</xsl:text>

  <!-- Class End -->
  <xsl:text>
}
</xsl:text>

</xsl:if>
</xsl:template>


<!-- ***** Validation ***** -->
<xsl:template match="entity" mode="validation">

<!-- ** implemented in AbstractGenericDAO **

<xsl:text>  @Override
  protected void validate_BuiltIn(</xsl:text><xsl:value-of select="$entity"/><xsl:text> pEntity) {
    // TODO: implement validation check
</xsl:text>


<xsl:text>  }

</xsl:text>
-->

</xsl:template>


<!-- ***** Remove constraint checks ***** -->
<xsl:template match="entity" mode="remove-check">

  <xsl:variable name="foreign-key-check" select="key('foreign-key-check', $entity)"/>

  <xsl:if test="$foreign-key-check and $generate-entity/parameters/parameter[@name='generate-removecheck']='true'">

  <xsl:text>  @Override
  protected void checkRemove_BuiltIn(</xsl:text><xsl:value-of select="$entity"/><xsl:text> pEntity) throws de.provision.framework.jpa.RemoveConstraintException {

    Query query;
    Number count;

</xsl:text>
    <xsl:for-each select="$foreign-key-check">
      <xsl:variable name="foreign-entity" select="../../@name"/>

      <xsl:variable name="foreign-attribute" select="./ancestor::*[2]/attributes/attribute[@name=current()/attribute-ref/@attribute]"/>

      <xsl:variable name="enum-type">
        <xsl:call-template name="variable-enum-type">
          <xsl:with-param name="attribute" select="$foreign-attribute"/>
        </xsl:call-template>
      </xsl:variable>

      <xsl:variable name="attribute-name">
        <xsl:apply-templates select="$foreign-attribute" mode="attribute-name">
          <xsl:with-param name="foreign-key" select="."/>
          <xsl:with-param name="enum-type" select="$enum-type"/>
        </xsl:apply-templates>
      </xsl:variable>

      <xsl:text>    // Check Table </xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text>
    query = getEntityManager().createQuery("select count(*) from </xsl:text><xsl:value-of select="$foreign-entity"/>
    <xsl:text> where </xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>=?1");
    query.setParameter(1, pEntity);
    count = (Number)query.getSingleResult();
    if (count.longValue()!=0) {
      throw new de.provision.framework.jpa.RemoveConstraintException("</xsl:text><xsl:value-of select="$entity"/><xsl:text>", "</xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text>", "</xsl:text>
      <xsl:call-template name="replace-string">
        <xsl:with-param name="text" select="$generate-entity/remove-constraint-messages/remove-constraint-message[@foreign-entity=$foreign-entity]"/>
        <xsl:with-param name="replace">&quot;</xsl:with-param>
        <xsl:with-param name="with">\&quot;</xsl:with-param>
      </xsl:call-template>
      <xsl:text>");
    }

</xsl:text>

    </xsl:for-each>

    <xsl:text>  }

</xsl:text>

  </xsl:if>

</xsl:template>


<!-- ***** Cascading delete ***** -->
<xsl:template match="entity" mode="cascading-delete">

  <xsl:variable name="foreign-key-cascading-delete" select="key('foreign-key-cascading-delete', $entity)"/>

  <xsl:if test="$foreign-key-cascading-delete">

    <xsl:text>  @Override
  protected void removeDependencies_BuiltIn(</xsl:text><xsl:value-of select="$entity"/><xsl:text> pEntity) {
    // remove dependencies

</xsl:text>

    <xsl:for-each select="$foreign-key-cascading-delete">
      <xsl:variable name="ent" select="../.."/>

      <xsl:variable name="check-skip-onetomany">
        <xsl:apply-templates select="." mode="check-skip-onetomany"/>
      </xsl:variable>
      <xsl:choose>
      
        <!-- remove manually if onetomany collection is not generated for this entty -->
        <xsl:when test="$check-skip-onetomany='true'">

          <xsl:variable name="attribute" select="attribute-ref/@attribute"/>
      
          <xsl:variable name="enum-type">
            <xsl:call-template name="variable-enum-type">
              <xsl:with-param name="attribute" select="$ent/attributes/attribute[@name=$attribute]"/>
            </xsl:call-template>
          </xsl:variable>
      
          <xsl:variable name="attribute-name">
            <xsl:apply-templates select="$ent/attributes/attribute[@name=$attribute]" mode="attribute-name">
              <xsl:with-param name="foreign-key" select="."/>
              <xsl:with-param name="enum-type" select="$enum-type"/>
            </xsl:apply-templates>
          </xsl:variable>

          <xsl:choose>
            <xsl:when test="@one-to-one='true'">
          <xsl:text>    // Remove from table </xsl:text><xsl:value-of select="$ent/@name"/><xsl:text>
</xsl:text>
    <xsl:value-of select="$ent/@name"/><xsl:text> entity = m</xsl:text><xsl:value-of select="$ent/@name"/><xsl:text>DAO.findBy</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>(pEntity));
    if (entity!=null) {
      m</xsl:text><xsl:value-of select="$ent/@name"/><xsl:text>DAO.remove(entity);
    }

</xsl:text>
            </xsl:when>
            <xsl:otherwise>
          <xsl:text>    // Remove from table </xsl:text><xsl:value-of select="$ent/@name"/><xsl:text>
    for (</xsl:text><xsl:value-of select="$ent/@name"/><xsl:text> entity : m</xsl:text><xsl:value-of select="$ent/@name"/><xsl:text>DAO.findBy</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>(pEntity)) {
      m</xsl:text><xsl:value-of select="$ent/@name"/><xsl:text>DAO.remove(entity);
    }

</xsl:text>
            </xsl:otherwise>
          </xsl:choose>

        </xsl:when>
        
        <!-- remove (partial) automatically if onetomany colleciton is generated for this entity -->
        <xsl:otherwise>
  
          <xsl:choose>
            <xsl:when test="@one-to-one='true'">
              <xsl:text>    // Remove from table </xsl:text><xsl:value-of select="$ent/@name"/> (is done automatically because of CascadeType.REMOVE)<xsl:text>

</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text>    // Remove from table </xsl:text><xsl:value-of select="$ent/@name"/> (just clear, because DELETE_ORPHAN is enabled)<xsl:text>
    pEntity.get</xsl:text><xsl:value-of select="../../@name"/><xsl:text>().clear();

</xsl:text>
            </xsl:otherwise>
          </xsl:choose>
          
        </xsl:otherwise>
      </xsl:choose>
    </xsl:for-each>

    <xsl:text>  }

</xsl:text>

  </xsl:if>

</xsl:template>


<!-- ***** Foreign key dependend find methods ***** -->
<xsl:template match="entity" mode="find-foreign-key">

  <xsl:variable name="ent" select="."/>

  <xsl:for-each select="$ent/keys/foreign-key">
    <xsl:variable name="attribute" select="attribute-ref/@attribute"/>

    <xsl:variable name="enum-type">
      <xsl:call-template name="variable-enum-type">
        <xsl:with-param name="attribute" select="$ent/attributes/attribute[@name=$attribute]"/>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="attribute-name">
      <xsl:apply-templates select="$ent/attributes/attribute[@name=$attribute]" mode="attribute-name">
        <xsl:with-param name="foreign-key" select="."/>
        <xsl:with-param name="enum-type" select="$enum-type"/>
      </xsl:apply-templates>
    </xsl:variable>

    <xsl:variable name="attribute-variable">
      <xsl:text>p</xsl:text>
      <xsl:value-of select="$attribute-name"/>
    </xsl:variable>

    <xsl:variable name="method-name">
      <xsl:text>findBy</xsl:text>
      <xsl:value-of select="$attribute-name"/>
    </xsl:variable>

    <!-- Generate only if no custom method with same name exists -->
    <xsl:if test="not($generate-entity/custom-find-methods/custom-find-method/@name=$method-name)">

    <xsl:if test="$generate-comments">
      <xsl:text>  /**
   * Fetches entities from the database and returns &lt;code&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/code&gt; object(s).
   * @param </xsl:text><xsl:value-of select="$attribute-variable"/>
     <xsl:text> Search criteria for attribute &lt;i&gt;</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>&lt;/i&gt;.
   * @return Entity list
   */
</xsl:text>
    </xsl:if>

    <xsl:text>  @SuppressWarnings("unchecked")
  public java.util.List&lt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&gt; </xsl:text>
    <xsl:value-of select="$method-name"/>
    <xsl:text>(</xsl:text>

    <xsl:choose>
      <xsl:when test="$enum-type!=''">
        <xsl:value-of select="$enum-type"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="@foreign-entity"/>
      </xsl:otherwise>
    </xsl:choose>

    <xsl:text> </xsl:text>
    <xsl:value-of select="$attribute-variable"/>
    <xsl:text>) {
    Query query;
    if (</xsl:text><xsl:value-of select="$attribute-variable"/><xsl:text>==null) {
      query = getEntityManager().createQuery("select e from </xsl:text><xsl:value-of select="$entity"/><xsl:text> e</xsl:text>
    <xsl:text> where e.</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text> IS NULL order by e.Id");
    }
    else {
      query = getEntityManager().createQuery("select e from </xsl:text><xsl:value-of select="$entity"/><xsl:text> e</xsl:text>
    <xsl:text> where e.</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>=?1 order by e.Id");
      query.setParameter(1, </xsl:text>
    <xsl:choose>
      <xsl:when test="$enum-type!=''">
        <xsl:text></xsl:text><xsl:value-of select="$attribute-variable"/><xsl:text>.getId()</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$attribute-variable"/>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:text>);
    }
    return query.getResultList();
  }

</xsl:text>

    </xsl:if>

  </xsl:for-each>
</xsl:template>


<!-- ***** Custom find methods ***** -->
<xsl:template match="entity" mode="find-custom">
  <xsl:variable name="ent" select="."/>

  <xsl:for-each select="$generate-entity/custom-find-methods/custom-find-method">
    <xsl:if test="$generate-comments">
      <xsl:text>  /**
   * </xsl:text>
      <xsl:choose>
        <xsl:when test="@description!=''"><xsl:value-of select="@description"/></xsl:when>
        <xsl:otherwise><xsl:text>Fetches entities from the database and returns an &lt;code&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/code&gt; object(s).</xsl:text></xsl:otherwise>
      </xsl:choose>
      <xsl:for-each select="method-attribute">
        <xsl:variable name="attribute" select="$ent/attributes/attribute[@name=current()/@name]"/>

        <xsl:variable name="enum-type">
          <xsl:call-template name="variable-enum-type">
            <xsl:with-param name="attribute" select="$attribute"/>
          </xsl:call-template>
        </xsl:variable>

        <xsl:variable name="foreign-key" select="$ent/keys/foreign-key[attribute-ref/@attribute=$attribute/@name and $enum-type='']"/>

        <xsl:variable name="attribute-name">
          <xsl:apply-templates select="$attribute" mode="attribute-name">
            <xsl:with-param name="foreign-key" select="$foreign-key"/>
            <xsl:with-param name="enum-type" select="$enum-type"/>
          </xsl:apply-templates>
        </xsl:variable>

        <xsl:text>
   * @param p</xsl:text>
        <xsl:value-of select="$attribute-name"/>
        <xsl:text> Search criteria for attribute &lt;i&gt;</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>&lt;/i&gt;.</xsl:text>
      </xsl:for-each>

      <xsl:text>
</xsl:text>
      <xsl:choose>
        <xsl:when test="@returns-multiple='true'">
          <xsl:text>   * @return Entity list
</xsl:text>
        </xsl:when>
        <xsl:otherwise>
          <xsl:text>   * @return Single entity or null if none found
</xsl:text>
        </xsl:otherwise>
      </xsl:choose>
      <xsl:text>   */
</xsl:text>
    </xsl:if>
    <xsl:text>  @SuppressWarnings("unchecked")
  public </xsl:text>
    <xsl:if test="@returns-multiple='true'"><xsl:text>java.util.List&lt;</xsl:text></xsl:if>
    <xsl:value-of select="$entity"/>
    <xsl:if test="@returns-multiple='true'"><xsl:text>&gt;</xsl:text></xsl:if>
    <xsl:text> </xsl:text>
    <xsl:value-of select="@name"/>
    <xsl:text>(</xsl:text>
    <xsl:for-each select="method-attribute">
      <xsl:variable name="attribute" select="$ent/attributes/attribute[@name=current()/@name]"/>

      <xsl:variable name="enum-type">
        <xsl:call-template name="variable-enum-type">
          <xsl:with-param name="attribute" select="$attribute"/>
        </xsl:call-template>
      </xsl:variable>

      <xsl:variable name="foreign-key" select="$ent/keys/foreign-key[attribute-ref/@attribute=$attribute/@name and $enum-type='']"/>

      <xsl:variable name="attribute-name">
        <xsl:apply-templates select="$attribute" mode="attribute-name">
          <xsl:with-param name="foreign-key" select="$foreign-key"/>
          <xsl:with-param name="enum-type" select="$enum-type"/>
        </xsl:apply-templates>
      </xsl:variable>

      <xsl:choose>
        <xsl:when test="$enum-type!=''">
          <xsl:value-of select="$enum-type"/>
        </xsl:when>
        <xsl:when test="$foreign-key">
          <xsl:value-of select="$foreign-key/@foreign-entity"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="variable-type">
            <xsl:with-param name="type">
              <xsl:apply-templates select="." mode="type"/>
            </xsl:with-param>
          </xsl:call-template>
        </xsl:otherwise>
      </xsl:choose>
      <xsl:text> p</xsl:text>
      <xsl:value-of select="$attribute-name"/>
      <xsl:if test="position() &lt; last()">
        <xsl:text>, </xsl:text>
      </xsl:if>
    </xsl:for-each>
    <xsl:text>) {
    Query query = generateQuery(
      "</xsl:text>
        <xsl:call-template name="replace-query-placeholders">
          <xsl:with-param name="text" select="@where-expression"/>
        </xsl:call-template>
      <xsl:text>", // Where-Statement
      "</xsl:text><xsl:value-of select="@order-by-expression"/><xsl:text>", // Order By-Statement
</xsl:text>
    <xsl:if test="inner-join">
      <xsl:variable name="tables">
        <xsl:for-each select="inner-join">
          <xsl:if test="position() &gt; 1"><xsl:text>, </xsl:text></xsl:if>
          <xsl:text>"</xsl:text>
          <xsl:value-of select="@entity"/>
          <xsl:if test="@entity-alias!=''">
            <xsl:text> </xsl:text>
            <xsl:value-of select="@entity-alias"/>
          </xsl:if>
          <xsl:text>"</xsl:text>
        </xsl:for-each>
      </xsl:variable>
      <xsl:variable name="conditions">
        <xsl:for-each select="inner-join">
          <xsl:if test="position() &gt; 1"><xsl:text>, </xsl:text></xsl:if>
          <xsl:text>"</xsl:text>
          <xsl:value-of select="@join-expression"/>
          <xsl:text>"</xsl:text>
        </xsl:for-each>
      </xsl:variable>

      <xsl:text>      "</xsl:text><xsl:value-of select="@entity-alias"/><xsl:text>", // Table alias
      new String[] { </xsl:text><xsl:value-of select="$tables"/><xsl:text> }, // Inner join table(s)
      new String[] { </xsl:text><xsl:value-of select="$conditions"/><xsl:text> }, // Inner join condition(s)
</xsl:text>
    </xsl:if>
    <xsl:if test="@returns-multiple='false'">
      <xsl:text>      1, // Return max. 1 record
</xsl:text>
    </xsl:if>
    <xsl:text>      </xsl:text><xsl:value-of select="$entity"/><xsl:text>.class);
</xsl:text>
    <xsl:for-each select="method-attribute">
      <xsl:variable name="attribute" select="$ent/attributes/attribute[@name=current()/@name]"/>

      <xsl:variable name="enum-type">
        <xsl:call-template name="variable-enum-type">
          <xsl:with-param name="attribute" select="$attribute"/>
        </xsl:call-template>
      </xsl:variable>

      <xsl:variable name="foreign-key" select="$ent/keys/foreign-key[attribute-ref/@attribute=$attribute/@name and $enum-type='']"/>

      <xsl:variable name="attribute-name">
        <xsl:apply-templates select="$attribute" mode="attribute-name">
          <xsl:with-param name="foreign-key" select="$foreign-key"/>
          <xsl:with-param name="enum-type" select="$enum-type"/>
        </xsl:apply-templates>
      </xsl:variable>

      <xsl:variable name="attribute-variable">
        <xsl:text>p</xsl:text>
        <xsl:value-of select="$attribute-name"/>
      </xsl:variable>

      <xsl:text>    query.setParameter(</xsl:text><xsl:value-of select="position()"/><xsl:text>, </xsl:text>
      <xsl:choose>
        <xsl:when test="$enum-type!=''">
          <xsl:value-of select="$attribute-variable"/><xsl:text>!=null ? (Integer)</xsl:text><xsl:value-of select="$attribute-variable"/><xsl:text>.getId() : null</xsl:text>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="$attribute-variable"/>
        </xsl:otherwise>
      </xsl:choose>
      <xsl:text>);
</xsl:text>
    </xsl:for-each>
    <xsl:choose>
      <xsl:when test="@returns-multiple='true'">
        <xsl:text>    return query.getResultList();
</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>    java.util.List&lt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&gt; list = query.getResultList();
    if (list.size()==0) {
      return null;
    }
    return list.get(0);
</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:text>  }

</xsl:text>

  </xsl:for-each>

</xsl:template>


</xsl:stylesheet>
