<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  version="1.0"
>

<xsl:import href="platform_defaults.xsl"/>

<xsl:output method="text" encoding="ISO-8859-1"/>


<xsl:template match="/">
  <xsl:apply-templates select="$db-definition/entities/entity[@name=$entity]"/>
</xsl:template>



<!-- ***** Class File generieren ***** -->
<xsl:template match="entity">
<xsl:if test="$generate-entity/parameters/parameter[@name='generate-entity']='true'
    and $platform/parameters/parameter[@name='generate-unittest']='true'">

  <!-- File Header, package, import statements -->
  <xsl:value-of select="$platform/parameters/parameter[@name='file-header']"/><xsl:text>
package </xsl:text><xsl:value-of select="$platform/parameters/parameter[@name='unittest-package']"/><xsl:text>;

import junit.framework.Test;
import junit.framework.TestSuite;

</xsl:text>

  <!-- Class-Kommentar -->
  <xsl:if test="$generate-comments">
    <xsl:text>/**
 * Unit Test Case for Entity &lt;code&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/code&gt;.
 * @author Generated by PVEntityGenerator
 */
</xsl:text>
  </xsl:if>

  <!-- Class Beginn -->
  <xsl:text>public class </xsl:text><xsl:value-of select="$entity"/><xsl:text>Test extends </xsl:text>
  <xsl:value-of select="$platform/parameters/parameter[@name='unittest-baseclass']"/><xsl:text> {

</xsl:text>
  <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Constructor.
   * @param pName Test name.
   */
</xsl:text>
  </xsl:if>
<xsl:text>  public </xsl:text><xsl:value-of select="$entity"/><xsl:text>Test(String pName) {
    super(pName);
  }

</xsl:text>
  <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Test suite.
   * @return Test
   */
</xsl:text>
  </xsl:if>
<xsl:text>  public static Test suite() {
    return new TestSuite(</xsl:text><xsl:value-of select="$entity"/><xsl:text>Test.class);
  }

</xsl:text>
  <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Test object instance.
   * @throws Exception
   */
</xsl:text>
  </xsl:if>
<xsl:text>  public void testObjectInstance() throws Exception {
    new </xsl:text><xsl:value-of select="$entity-class"/><xsl:text>();
  }

</xsl:text>


  <!-- Test default methods -->
  <xsl:apply-templates select="." mode="test-default"/>

  <!-- Test Remove Constraints/Cascading Deletes -->
  <xsl:apply-templates select="." mode="test-constraints"/>

  <!-- Test custom create methods -->
  <xsl:apply-templates select="." mode="test-custom-create"/>

  <!-- Test custom find methods -->
  <xsl:apply-templates select="." mode="test-custom-find"/>


  <!-- Placeholder for manual class extensions -->
  <xsl:text>//+++ Custom class extensions START +++
// To prevent deleting your changes from PVEntityGenerator put your manual class extensions only here

//+++ Custom class extensions END +++
</xsl:text>

  <!-- Class End -->
  <xsl:text>
}
</xsl:text>

</xsl:if>
</xsl:template>


<!-- ***** Test default methods ***** -->
<xsl:template match="entity" mode="test-default">

<xsl:if test="$generate-entity/parameters/parameter[@name='generate-home']='true' and $generate-entity/parameters/parameter[@name='generate-findbyprimarykey']='true'">
  <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Test create/store/remove and attributes.
   * @throws Exception
   */
</xsl:text>
  </xsl:if>
<xsl:text>  public void testCreateStoreRemoveAttributes() throws Exception {

    // test create
</xsl:text>
  <xsl:apply-templates select="." mode="test-createrecord">
    <xsl:with-param name="variable" select="'dbo'"/>
  </xsl:apply-templates>
  <xsl:text>
    // test default values
</xsl:text>

  <!-- test default attributes (not first attribute (primary key), not vstamp, not "@no-unittest") -->
  <xsl:for-each select="attributes/attribute[position()!=1 and @type!='VSTAMP' and not(@no-unittest='true') and not(@deprecated='true') and (@required='false' or @type!='BLOB')]">
    <xsl:text>    assertEquals("test default value </xsl:text><xsl:value-of select="@name"/><xsl:text>", </xsl:text>
    <xsl:choose>
      <xsl:when test="@required='true' and @type!='VSTAMP' and @type!='BIT' and (@default-value='' or not(@default-value))">
        <xsl:call-template name="test-test-value">
          <xsl:with-param name="attribute" select="."/>
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="test-default-value">
          <xsl:with-param name="attribute" select="."/>
        </xsl:call-template>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:text>, dbo.get</xsl:text><xsl:value-of select="@name"/><xsl:text>()</xsl:text>
    <xsl:if test="@type='FLOAT' or @type='DECIMAL'">
      <xsl:text>, 0.000001d</xsl:text>
    </xsl:if>
    <xsl:text>);
</xsl:text>
  </xsl:for-each>

  <xsl:text>
    // test set methods
</xsl:text>

  <!-- test set methods (not first attribute (primary key), not vstamp, not "@no-unittest") -->
  <xsl:for-each select="attributes/attribute[position()!=1 and @type!='VSTAMP' and not(@no-unittest='true') and not(@deprecated='true')]">
    <xsl:choose>
      <xsl:when test="@type='BLOB'">
        <xsl:text>    byte[] abytSet_</xsl:text><xsl:value-of select="position()"/>
        <xsl:text> = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09};
    dbo.set</xsl:text><xsl:value-of select="@name"/><xsl:text>(abytSet_</xsl:text><xsl:value-of select="position()"/><xsl:text>);
</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>    dbo.set</xsl:text><xsl:value-of select="@name"/><xsl:text>(</xsl:text>
        <xsl:call-template name="test-test-value">
          <xsl:with-param name="attribute" select="."/>
        </xsl:call-template>
        <xsl:text>);
</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:for-each>

  <xsl:text>
    // test get methods
</xsl:text>

  <!-- test get methods (not first attribute (primary key), not vstamp, not "@no-unittest") -->
  <xsl:for-each select="attributes/attribute[position()!=1 and @type!='VSTAMP' and not(@no-unittest='true') and not(@deprecated='true')]">
    <xsl:choose>
      <xsl:when test="@type='BLOB'">
        <xsl:text>    byte[] abytGet_</xsl:text><xsl:value-of select="position()"/>
        <xsl:text> = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09};
    for (int intIndex=0; intIndex&lt;abytGet_</xsl:text><xsl:value-of select="position()"/><xsl:text>.length; intIndex++) {
      assertEquals("test get BinaryData", abytGet_</xsl:text><xsl:value-of select="position()"/><xsl:text>[intIndex], dbo.get</xsl:text><xsl:value-of select="@name"/><xsl:text>()[intIndex]);
    }
</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>    assertEquals("test get </xsl:text><xsl:value-of select="@name"/><xsl:text>", </xsl:text>
        <xsl:call-template name="test-test-value">
          <xsl:with-param name="attribute" select="."/>
        </xsl:call-template>
        <xsl:text>, dbo.get</xsl:text><xsl:value-of select="@name"/><xsl:text>()</xsl:text>
        <xsl:if test="@type='FLOAT' or @type='DECIMAL'">
          <xsl:text>, 0.000001d</xsl:text>
        </xsl:if>
        <xsl:text>);
</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:for-each>

  <xsl:text>
    // test store
    dbo.store(mcon);

    // test retrieve
    </xsl:text><xsl:value-of select="$entity-class"/><xsl:text> dbo2 = </xsl:text>
    <xsl:value-of select="$entity-class"/><xsl:text>Home.findByPrimaryKey(dbo.get</xsl:text>
    <xsl:value-of select="attributes/attribute[position()=1]/@name"/>
    <xsl:text>(), mcon);
</xsl:text>

  <!-- test retrieve (not first attribute (primary key), not vstamp, not "@no-unittest") -->
  <xsl:for-each select="attributes/attribute[position()!=1 and @type!='VSTAMP' and not(@no-unittest='true') and not(@deprecated='true')]">
    <xsl:choose>
      <xsl:when test="@type='BLOB'">
        <xsl:text>    byte[] abytRetrieve_</xsl:text><xsl:value-of select="position()"/>
        <xsl:text> = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09};
    for (int intIndex=0; intIndex&lt;abytRetrieve_</xsl:text><xsl:value-of select="position()"/><xsl:text>.length; intIndex++) {
      assertEquals("test retrieve BinaryData", abytRetrieve_</xsl:text><xsl:value-of select="position()"/><xsl:text>[intIndex], dbo2.get</xsl:text><xsl:value-of select="@name"/><xsl:text>()[intIndex]);
    }
</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>    assertEquals("test retrieve </xsl:text><xsl:value-of select="@name"/><xsl:text>", </xsl:text>
        <xsl:call-template name="test-test-value">
          <xsl:with-param name="attribute" select="."/>
        </xsl:call-template>
        <xsl:text>, dbo2.get</xsl:text><xsl:value-of select="@name"/><xsl:text>()</xsl:text>
        <xsl:if test="@type='FLOAT' or @type='DECIMAL'">
          <xsl:text>, 0.000001d</xsl:text>
        </xsl:if>
        <xsl:text>);
</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:for-each>

  <xsl:text>
    dbo2.remove(mcon);

  }

</xsl:text>
</xsl:if>

</xsl:template>


<!-- ***** Test Remove Constraints/Cascading Deletes ***** -->
<xsl:template match="entity" mode="test-constraints">
  <xsl:variable name="foreign-key-check" select="key('foreign-key-check', $entity)"/>
  <xsl:variable name="foreign-key-cascading-delete" select="key('foreign-key-cascading-delete', $entity)"/>
  <xsl:variable name="ent" select="."/>

  <!-- Constraint Checks -->
  <xsl:if test="$foreign-key-check and $generate-entity/parameters/parameter[@name='generate-removecheck']='true'">
    <xsl:for-each select="$foreign-key-check">
      <xsl:variable name="ent-foreign" select="../.."/>

  <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Test check remove constraints.
   * @throws Exception
   */
</xsl:text>
  </xsl:if>
      <xsl:text>  public void testCheckRemoveConstraints</xsl:text><xsl:value-of select="position()"/>
      <xsl:text>_</xsl:text><xsl:value-of select="$ent-foreign/@name"/>
      <xsl:text>() throws Exception {
    // create test records
</xsl:text>
      <xsl:apply-templates select="$ent" mode="test-createrecord">
        <xsl:with-param name="variable" select="'dbo1'"/>
      </xsl:apply-templates>
      <xsl:apply-templates select="$ent-foreign" mode="test-createrecord">
        <xsl:with-param name="variable" select="'dbo2'"/>
      </xsl:apply-templates>

      <xsl:text>    dbo2.set</xsl:text><xsl:value-of select="attribute-ref/@attribute"/><xsl:text>(dbo1.get</xsl:text><xsl:value-of select="attribute-ref/@foreign-attribute"/><xsl:text>());
    dbo2.store(mcon);

    // check constraint
    boolean fRemoveConstraint = false;
    try {
      dbo1.remove(mcon);
    }
    catch (de.provision.framework.PVExceptionRemoveConstraint ex) {
      fRemoveConstraint = true;
    }
    dbo2.remove(mcon);
    assertEquals("Constraint must be thrown", true, fRemoveConstraint);
    dbo1.remove(mcon);
  }

</xsl:text>
    </xsl:for-each>
  </xsl:if>

  <!-- Cascading Deletes -->
  <xsl:if test="$foreign-key-cascading-delete">
    <xsl:for-each select="$foreign-key-cascading-delete">
      <xsl:variable name="ent-foreign" select="../.."/>

      <xsl:if test="$generate-comments">
        <xsl:text>  /**
   * Test remove dependent objects
   * @throws Exception
   */
</xsl:text>
      </xsl:if>
      <xsl:text>  public void testRemoveDependentObjects</xsl:text><xsl:value-of select="position()"/>
      <xsl:text>_</xsl:text><xsl:value-of select="$ent-foreign/@name"/>
      <xsl:text>() throws Exception {
    // create test records
</xsl:text>
      <xsl:apply-templates select="$ent" mode="test-createrecord">
        <xsl:with-param name="variable" select="'dbo1'"/>
      </xsl:apply-templates>
      <xsl:apply-templates select="$ent-foreign" mode="test-createrecord">
        <xsl:with-param name="variable" select="'dbo2'"/>
      </xsl:apply-templates>

      <xsl:text>    dbo2.set</xsl:text><xsl:value-of select="attribute-ref/@attribute"/><xsl:text>(dbo1.get</xsl:text><xsl:value-of select="attribute-ref/@foreign-attribute"/><xsl:text>());
    dbo2.store(mcon);

    // test automatic remove
    dbo1.remove(mcon);
    </xsl:text><xsl:value-of select="concat($platform/parameters/parameter[@name='entity-package'],'.',$ent-foreign/@name)"/><xsl:text> dbo3 = null;
    try {
      dbo3 = </xsl:text><xsl:value-of select="concat($platform/parameters/parameter[@name='entity-package'],'.',$ent-foreign/@name)"/><xsl:text>Home.findByPrimaryKey(dbo2.get</xsl:text>
    <xsl:value-of select="$ent-foreign/attributes/attribute[position()=1]/@name"/>
    <xsl:text>(), mcon);
    }
    catch (de.provision.framework.PVExceptionNoRecordFound ex) {
      // ignore
    }
    assertEquals("Record must be deleted", null, dbo3);
  }

</xsl:text>

    </xsl:for-each>
  </xsl:if>

</xsl:template>


<!-- ***** Test custom create methods ***** -->
<xsl:template match="entity" mode="test-custom-create">
  <xsl:variable name="ent" select="."/>

  <xsl:for-each select="$generate-entity/custom-create-methods/custom-create-method">
    <xsl:if test="$generate-comments">
      <xsl:text>  /**
   * Test custom create method.
   * @throws Exception
   */
</xsl:text>
    </xsl:if>
    <xsl:text>  public void testCreateCustom</xsl:text><xsl:value-of select="position()-1"/><xsl:text>() throws Exception {
    </xsl:text><xsl:value-of select="$entity-class"/><xsl:text> dbo = </xsl:text><xsl:value-of select="$entity-class"/><xsl:text>Home.</xsl:text>
    <xsl:value-of select="@name"/><xsl:text>(</xsl:text>
    <xsl:for-each select="method-attribute">
      <xsl:variable name="attribute" select="$ent/attributes/attribute[@name=current()/@name]"/>
      <xsl:call-template name="test-test-value">
        <xsl:with-param name="attribute" select="$attribute"/>
      </xsl:call-template>
      <xsl:text>, </xsl:text>
    </xsl:for-each>
    <xsl:text>mcon);
</xsl:text>

    <xsl:for-each select="method-attribute">
      <xsl:variable name="attribute" select="$ent/attributes/attribute[@name=current()/@name]"/>
      <xsl:if test="$attribute/@type!='VSTAMP'">
        <xsl:text>    assertEquals("test constructor value </xsl:text><xsl:value-of select="@attribute-name"/><xsl:text>", </xsl:text>
        <xsl:call-template name="test-test-value">
          <xsl:with-param name="attribute" select="$attribute"/>
        </xsl:call-template>
        <xsl:text>, dbo.get</xsl:text><xsl:value-of select="$attribute/@name"/><xsl:text>()</xsl:text>
        <xsl:if test="$attribute/@type='FLOAT' or $attribute/@type='DECIMAL'">
          <xsl:text>, 0.000001d</xsl:text>
        </xsl:if>
        <xsl:text>);
</xsl:text>
      </xsl:if>
    </xsl:for-each>

    <xsl:text>    dbo.remove(mcon);
  }

</xsl:text>
  </xsl:for-each>

</xsl:template>


<!-- ***** Test custom find methods ***** -->
<xsl:template match="entity" mode="test-custom-find">
  <xsl:variable name="ent" select="."/>

  <xsl:for-each select="$generate-entity/custom-find-methods/custom-find-method[@generate-test='true']">

    <!-- Custom find with custom method attributes must be testet separately -->
    <xsl:choose>
      <xsl:when test="method-attribute[@type!='']">
        <xsl:apply-templates select="." mode="test-custom">
          <xsl:with-param name="ent" select="$ent"/>
          <xsl:with-param name="pos" select="position()-1"/>
        </xsl:apply-templates>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="." mode="test-standard">
          <xsl:with-param name="ent" select="$ent"/>
          <xsl:with-param name="pos" select="position()-1"/>
        </xsl:apply-templates>
      </xsl:otherwise>
    </xsl:choose>

  </xsl:for-each>

</xsl:template>

<xsl:template match="custom-find-method" mode="test-standard">
  <xsl:param name="ent"/>
  <xsl:param name="pos"/>

    <xsl:if test="$generate-comments">
      <xsl:text>  /**
   * Test custom find method.
   * @throws Exception
   */
</xsl:text>
    </xsl:if>
    <xsl:text>  public void testFindCustom</xsl:text><xsl:value-of select="$pos"/><xsl:text>_</xsl:text>
    <xsl:value-of select="@name"/><xsl:text>() throws Exception {
    // create test record
</xsl:text>
    <xsl:apply-templates select="$ent" mode="test-createrecord">
      <xsl:with-param name="variable" select="'dbo'"/>
    </xsl:apply-templates>
    <xsl:for-each select="method-attribute">
      <xsl:variable name="attribute" select="$ent/attributes/attribute[@name=current()/@name]"/>
      <xsl:text>    dbo.set</xsl:text><xsl:value-of select="$attribute/@name"/><xsl:text>(</xsl:text>
      <xsl:call-template name="test-test-value">
        <xsl:with-param name="attribute" select="$attribute"/>
        <xsl:with-param name="type" select="@type"/>
        <xsl:with-param name="force-required" select="1"/>
      </xsl:call-template>
      <xsl:text>);
</xsl:text>
    </xsl:for-each>
    <xsl:text>    dbo.store(mcon);

    // find via custom method
</xsl:text>

    <xsl:choose>
      <xsl:when test="@returns-multiple='true'">
        <xsl:text>    boolean fFound = false;
    java.util.List&lt;</xsl:text><xsl:value-of select="$entity-class"/><xsl:text>&gt; adbo = </xsl:text><xsl:value-of select="$entity-class"/>
        <xsl:text>Home.</xsl:text><xsl:value-of select="@name"/><xsl:text>(</xsl:text>
        <xsl:for-each select="method-attribute">
          <xsl:variable name="attribute" select="$ent/attributes/attribute[@name=current()/@name]"/>
          <xsl:call-template name="test-test-value">
            <xsl:with-param name="attribute" select="$attribute"/>
            <xsl:with-param name="type" select="@type"/>
            <xsl:with-param name="force-required" select="1"/>
          </xsl:call-template>
          <xsl:text>, </xsl:text>
        </xsl:for-each>
        <xsl:text>mcon);
    for (</xsl:text><xsl:value-of select="$entity-class"/><xsl:text> item : adbo) {
      if (item.get</xsl:text><xsl:value-of select="$ent/attributes/attribute[1]/@name"/><xsl:text>()==dbo.get</xsl:text>
        <xsl:value-of select="$ent/attributes/attribute[1]/@name"/><xsl:text>()) {
        fFound = true;
      }
    }
    assertEquals("test </xsl:text><xsl:value-of select="@name"/><xsl:text> method", true, fFound);
</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text> </xsl:text>
        <xsl:text> </xsl:text>
        <xsl:text> </xsl:text>
        <xsl:text> </xsl:text>
        <xsl:value-of select="$entity-class"/><xsl:text> dbo2 = null;
    try {
      dbo2 = </xsl:text><xsl:value-of select="$entity-class"/><xsl:text>Home.</xsl:text><xsl:value-of select="@name"/><xsl:text>(</xsl:text>
        <xsl:for-each select="method-attribute">
          <xsl:variable name="attribute" select="$ent/attributes/attribute[@name=current()/@name]"/>
          <xsl:call-template name="test-test-value">
            <xsl:with-param name="attribute" select="$attribute"/>
            <xsl:with-param name="type" select="@type"/>
            <xsl:with-param name="force-required" select="1"/>
          </xsl:call-template>
          <xsl:text>, </xsl:text>
        </xsl:for-each>
        <xsl:text>mcon);
    }
    catch (Exception ex) {
      // ignore
    }
    assertEquals("test </xsl:text><xsl:value-of select="@name"/><xsl:text> method", true, dbo2!=null);
</xsl:text>
      </xsl:otherwise>
    </xsl:choose>

    <xsl:text>
    // remove test record
    dbo.remove(mcon);
  }

</xsl:text>

</xsl:template>

<xsl:template match="custom-find-method" mode="test-custom">
  <xsl:param name="ent"/>
  <xsl:param name="pos"/>

    <xsl:if test="$generate-comments">
      <xsl:text>  /**
   * Test custom find method.
   * @throws Exception
   */
</xsl:text>
    </xsl:if>
    <xsl:text>  public void testFindCustom</xsl:text><xsl:value-of select="$pos"/><xsl:text>_</xsl:text>
    <xsl:value-of select="@name"/><xsl:text>() throws Exception {
    // only call custom find method with custom parameters
    </xsl:text>

    <xsl:value-of select="$entity-class"/><xsl:text>Home.</xsl:text><xsl:value-of select="@name"/><xsl:text>(</xsl:text>
    <xsl:for-each select="method-attribute">
      <xsl:variable name="attribute" select="$ent/attributes/attribute[@name=current()/@name]"/>
      <xsl:call-template name="test-test-value">
        <xsl:with-param name="attribute" select="$attribute"/>
        <xsl:with-param name="type" select="@type"/>
        <xsl:with-param name="force-required" select="1"/>
      </xsl:call-template>
      <xsl:text>, </xsl:text>
    </xsl:for-each>
    <xsl:text>mcon);
  }

</xsl:text>

</xsl:template>


<!-- Create Test Record -->
<xsl:template match="entity" mode="test-createrecord">
  <xsl:param name="variable" select="'dbo'"/>
  <xsl:for-each select="attributes/attribute[position()!=1 and @required='true' and @type='BLOB']">
    <xsl:text>    byte[] abytCreate_</xsl:text><xsl:value-of select="position()"/><xsl:text> = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09};
</xsl:text>
  </xsl:for-each>
  <xsl:text> </xsl:text>
  <xsl:text> </xsl:text>
  <xsl:text> </xsl:text>
  <xsl:text> </xsl:text>
  <xsl:value-of select="concat($platform/parameters/parameter[@name='entity-package'],'.',@name)"/><xsl:text> </xsl:text><xsl:value-of select="$variable"/><xsl:text> = </xsl:text>
  <xsl:value-of select="concat($platform/parameters/parameter[@name='entity-package'],'.',@name)"/><xsl:text>Home.create(</xsl:text>
  <xsl:for-each select="attributes/attribute[position()!=1 and @required='true' and (@default-value='' or not(@default-value)) and @type!='VSTAMP' and @type!='BIT']">
    <xsl:choose>
      <xsl:when test="@type='BLOB'">
        <xsl:text>abytCreate_</xsl:text><xsl:value-of select="position()"/><xsl:text>, </xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="test-test-value">
          <xsl:with-param name="attribute" select="."/>
        </xsl:call-template>
        <xsl:text>, </xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:for-each>
  <xsl:text>mcon);
</xsl:text>
</xsl:template>


</xsl:stylesheet>
