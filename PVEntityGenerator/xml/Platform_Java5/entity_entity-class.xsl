<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  version="1.0"
>

<xsl:import href="platform_defaults.xsl"/>

<xsl:output method="text" encoding="ISO-8859-1"/>


<xsl:template match="/">
  <xsl:apply-templates select="$db-definition/entities/entity[@name=$entity]"/>
</xsl:template>



<!-- ***** Class File generieren ***** -->
<xsl:template match="entity">
<xsl:if test="$generate-entity/parameters/parameter[@name='generate-entity']='true'
    or $generate-entity/parameters/parameter[@name='generate-enumeration']='true'">

  <!-- File Header, package, import statements -->
  <xsl:value-of select="$platform/parameters/parameter[@name='file-header']"/><xsl:text>
package </xsl:text><xsl:value-of select="$platform/parameters/parameter[@name='entity-package']"/><xsl:text>;

</xsl:text>
  <xsl:text>import de.provision.framework.*;

</xsl:text>

  <!-- Class-Kommentar -->
  <xsl:if test="$generate-comments">
    <xsl:text>/**
</xsl:text>
    <xsl:if test="@description">
      <xsl:text> * </xsl:text><xsl:value-of select="@description"/><xsl:text>&lt;br/&gt;
</xsl:text>
    </xsl:if>
    <xsl:choose>
      <xsl:when test="$generate-entity/parameters/parameter[@name='generate-entity']='true'">
        <xsl:text> * The class &lt;code&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/code&gt; is an object wrapper for the table &lt;i&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/i&gt;.
 * It extends the &lt;code&gt;PVDbObject&lt;/code&gt; class and supports methods for storing or deleting an entity in the database.
</xsl:text>
        <xsl:if test="$generate-entity/parameters/parameter[@name='generate-home']='true'">
          <xsl:text> * The &lt;code&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>Home&lt;/code&gt; class provides methods for creating and fetching entities.
 * @see </xsl:text><xsl:value-of select="$entity-class"/><xsl:text>Home
</xsl:text>
        </xsl:if>
        <xsl:text> * @see de.provision.framework.PVDbObject
</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text> * The enumeration &lt;code&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/code&gt; provides access
 * to the enumeration values from the table &lt;i&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/i&gt;.
</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:text> * @author Generated by PVEntityGenerator
 */
</xsl:text>
  </xsl:if>

  <!-- Class Beginn -->
  <xsl:choose>
    <xsl:when test="$generate-entity/parameters/parameter[@name='generate-entity']='true'">
      <xsl:text>public class </xsl:text><xsl:value-of select="$entity"/><xsl:text> extends PVDbObject </xsl:text>
      <xsl:if test="$generate-entity-platform/parameters/parameter[@name='generate-serializable']='true'">
        <xsl:text>implements java.io.Serializable </xsl:text>
      </xsl:if>
      <xsl:text>{
</xsl:text>
      <xsl:if test="$generate-entity-platform/parameters/parameter[@name='generate-serializable']='true'">
        <xsl:text>  private static final long serialVersionUID = </xsl:text><xsl:value-of select="@hashcode"/><xsl:text>L;
</xsl:text>
      </xsl:if>
      <xsl:text>
</xsl:text>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>public enum </xsl:text><xsl:value-of select="$entity"/><xsl:text> implements PVDbEnum {

</xsl:text>
    </xsl:otherwise>
  </xsl:choose>

  <xsl:if test="$generate-entity/parameters/parameter[@name='generate-enumeration']='true'">

    <!-- Enumeration -->
    <xsl:apply-templates select="." mode="enumeration"/>

  </xsl:if>

  <xsl:if test="$generate-entity/parameters/parameter[@name='generate-entity']='true'">

    <!-- Constructor -->
    <xsl:apply-templates select="." mode="constructor"/>

    <!-- Get/Set-Methods -->
    <xsl:apply-templates select="." mode="get-set"/>

    <!-- Constraint-Checks -->
    <xsl:apply-templates select="." mode="constraint-checks"/>

  </xsl:if>

  <xsl:if test="$generate-entity/parameters/parameter[@name='generate-enumeration']='true'">

    <!-- Zusatzmethoden fÃ¼r Enumeration -->
    <xsl:apply-templates select="." mode="enumeration-methods"/>

  </xsl:if>

  <!-- Placeholder for manual class extensions -->
  <xsl:text>//+++ Custom class extensions START +++
// To prevent deleting your changes from PVEntityGenerator put your manual class extensions only here

//+++ Custom class extensions END +++
</xsl:text>

  <!-- Class End -->
  <xsl:text>
}
</xsl:text>

</xsl:if>
</xsl:template>



<!-- ***** Constructor ***** -->
<xsl:template match="entity" mode="constructor">
  <xsl:variable name="throws-exception" select="attributes/attribute[@type='TIMESTAMP' and @default-value!='']"/>

  <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Initializes a newly created &lt;code&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/code&gt; object.
   * Normally a Database wrapper object is not instanciated directly, but is returned by a create or find method from the &lt;code&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>Home&lt;/code&gt; class.
</xsl:text><xsl:if test="$throws-exception">   * @throws PVException
</xsl:if><xsl:text>   */
</xsl:text>
  </xsl:if>
    <xsl:text>  public </xsl:text><xsl:value-of select="$entity"/><xsl:text>() </xsl:text><xsl:if test="$throws-exception">throws PVException </xsl:if><xsl:text>{
</xsl:text>

    <!-- PVDbAttribute-Definitionen -->
    <xsl:text>    PVDbAttribute[] attr = {
</xsl:text>
    <xsl:for-each select="attributes/attribute">
      <xsl:variable name="type">
        <xsl:choose>
          <xsl:when test="@type='DECIMAL'">FLOAT</xsl:when>
          <xsl:otherwise><xsl:value-of select="@type"/></xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
    
      <xsl:text>      new PVDbAttribute("</xsl:text><xsl:value-of select="@name"/><xsl:text>", </xsl:text>
      <xsl:text>PVAttributeType.</xsl:text><xsl:value-of select="$type"/><xsl:text>, </xsl:text>
      <xsl:choose>
        <xsl:when test="@required='true'"><xsl:text>true</xsl:text></xsl:when>
        <xsl:otherwise><xsl:text>false</xsl:text></xsl:otherwise>
      </xsl:choose>
      <xsl:if test="@type='VARCHAR'">
        <xsl:text>, </xsl:text><xsl:value-of select="@size"/>
      </xsl:if>
      <xsl:text>)</xsl:text>
      <xsl:if test="position() &lt; last()">
        <xsl:text>,
</xsl:text>
      </xsl:if>
    </xsl:for-each>
    <xsl:text>
    };
    mattr = attr;
</xsl:text>

    <!-- Default values -->
    <xsl:for-each select="attributes/attribute[@default-value!='']">
      <xsl:variable name="enum-type">
        <xsl:call-template name="variable-enum-type">
          <xsl:with-param name="attribute" select="."/>
        </xsl:call-template>
      </xsl:variable>
      <xsl:variable name="value">
        <xsl:call-template name="format-type-value">
          <xsl:with-param name="type" select="@type"/>
          <xsl:with-param name="value" select="@default-value"/>
        </xsl:call-template>
      </xsl:variable>

      <xsl:text>    this.set</xsl:text>
      <xsl:choose>
        <xsl:when test="@name='vstamp'">VStamp</xsl:when>
        <xsl:otherwise><xsl:value-of select="@name"/></xsl:otherwise>
      </xsl:choose>
      <xsl:text>(</xsl:text>

      <xsl:choose>
        <xsl:when test="$enum-type!=''">
          <xsl:variable name="generate-foreign-entity" select="key('generate-entity', $enum-type)"/>
          <xsl:value-of select="$enum-type"/>
          <xsl:text>.</xsl:text>
          <xsl:value-of select="$generate-foreign-entity/enumeration-entries/enumeration-entry[@id=$value]/@identifier"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="$value"/>
        </xsl:otherwise>
      </xsl:choose>

      <xsl:text>);
</xsl:text>
    </xsl:for-each>

    <xsl:text>  }

</xsl:text>
</xsl:template>



<!-- ***** Get/Set-Methods ***** -->
<xsl:template match="entity" mode="get-set">

  <xsl:for-each select="attributes/attribute">

    <xsl:variable name="attribute-name">
      <xsl:choose>
        <xsl:when test="@type='VSTAMP'">VStamp</xsl:when>
        <xsl:otherwise><xsl:value-of select="@name"/></xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="enum-type">
      <xsl:call-template name="variable-enum-type">
        <xsl:with-param name="attribute" select="."/>
        <xsl:with-param name="entity" select="../.."/>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="comment">
      <xsl:if test="$generate-comments">
        <xsl:text>  /**
   * </xsl:text>
      <xsl:choose>
        <xsl:when test="@description!=''"><xsl:value-of select="@description"/></xsl:when>
        <xsl:otherwise><xsl:text>Attribute '</xsl:text><xsl:value-of select="@name"/><xsl:text>'.</xsl:text></xsl:otherwise>
      </xsl:choose>
      <xsl:if test="@required='true'">
        <xsl:text> Required.</xsl:text>
      </xsl:if>
      <xsl:if test="@default-value!=''">
        <xsl:text>&lt;br&gt;
   * Default value for new objects: &lt;b&gt;</xsl:text><xsl:value-of select="@default-value"/><xsl:text>&lt;/b&gt;</xsl:text>
      </xsl:if>
    </xsl:if>
    </xsl:variable>

    <xsl:variable name="comment_get">
      <xsl:choose>
        <xsl:when test="$generate-comments">
          <xsl:value-of select="$comment"/>
          <xsl:text>
   * @return Attribute value.</xsl:text>
          <xsl:if test="@deprecated='true'">
            <xsl:text>
   * @deprecated This attribute is deprecated.</xsl:text>
          </xsl:if>
          <xsl:text>
   */
</xsl:text>
        </xsl:when>
        <xsl:when test="not($generate-comments) and @deprecated='true'">
          <xsl:text>  /**
    * @deprecated This attribute is deprecated.
    */
</xsl:text>
        </xsl:when>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="comment_set">
      <xsl:choose>
        <xsl:when test="$generate-comments">
          <xsl:value-of select="$comment"/>
          <xsl:text>
   * @param p</xsl:text>
          <xsl:call-template name="type-prefix">
            <xsl:with-param name="type" select="@type"/>
          </xsl:call-template>
          <xsl:text>Value Attribute value.</xsl:text>
          <xsl:if test="@deprecated='true'">
            <xsl:text>
   * @deprecated This attribute is deprecated.</xsl:text>
          </xsl:if>
          <xsl:text>
   */
</xsl:text>
        </xsl:when>
        <xsl:when test="not($generate-comments) and @deprecated='true'">
          <xsl:text>  /**
    * @deprecated This attribute is deprecated.
    */
</xsl:text>
        </xsl:when>
      </xsl:choose>
    </xsl:variable>

    <xsl:if test="$generate-entity/parameters/parameter[@name='generate-getter']='true'">

    <!-- Get Method -->
    <xsl:value-of select="$comment_get"/>
    <xsl:text>  public </xsl:text>
    <xsl:choose>
      <xsl:when test="$enum-type!=''">
        <xsl:value-of select="$enum-type"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="variable-type">
          <xsl:with-param name="type" select="@type"/>
        </xsl:call-template>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:text> get</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>() {
    return </xsl:text>
    <xsl:if test="$enum-type!=''">
      <xsl:value-of select="$enum-type"/>
      <xsl:text>.valueOf(</xsl:text>
    </xsl:if>
    <xsl:text>mattr[</xsl:text><xsl:value-of select="position()-1"/><xsl:text>].get</xsl:text>
    <xsl:call-template name="method-type">
      <xsl:with-param name="type" select="@type"/>
    </xsl:call-template>
    <xsl:text>()</xsl:text>
    <xsl:if test="$enum-type!=''">
      <xsl:text>)</xsl:text>
    </xsl:if>
    <xsl:text>;
  }

</xsl:text>

    </xsl:if>

    <xsl:if test="$generate-entity/parameters/parameter[@name='generate-setter']='true'">

    <!-- Set Method -->
    <xsl:value-of select="$comment_set"/>
    <xsl:text>  public void set</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>(</xsl:text>
    <xsl:choose>
      <xsl:when test="$enum-type!=''">
        <xsl:value-of select="$enum-type"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="variable-type">
          <xsl:with-param name="type" select="@type"/>
        </xsl:call-template>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:text> p</xsl:text>
    <xsl:call-template name="type-prefix">
      <xsl:with-param name="type" select="@type"/>
    </xsl:call-template>
    <xsl:text>Value) {
    mattr[</xsl:text><xsl:value-of select="position()-1"/><xsl:text>].set</xsl:text>
    <xsl:call-template name="method-type">
      <xsl:with-param name="type" select="@type"/>
    </xsl:call-template>
    <xsl:text>(p</xsl:text>
    <xsl:call-template name="type-prefix">
      <xsl:with-param name="type" select="@type"/>
    </xsl:call-template>
    <xsl:text>Value</xsl:text>
    <xsl:text>);
  }

</xsl:text>

    </xsl:if>

  </xsl:for-each>

</xsl:template>



<!-- ***** Constraing-Checks ***** -->
<xsl:template match="entity" mode="constraint-checks">

  <xsl:variable name="foreign-key-check" select="key('foreign-key-check', $entity)"/>
  <xsl:variable name="foreign-key-cascading-delete" select="key('foreign-key-cascading-delete', $entity)"/>

  <!-- Constraint Checks -->
  <xsl:if test="$foreign-key-check and $generate-entity/parameters/parameter[@name='generate-removecheck']='true'">
    <xsl:if test="$generate-comments">
      <xsl:text>  /**
   * Checks for existing records in Table</xsl:text>
      <xsl:if test="count($foreign-key-check) &gt; 1"><xsl:text>s</xsl:text></xsl:if><xsl:text> </xsl:text>
      <xsl:for-each select="$foreign-key-check">
        <xsl:text>&lt;i&gt;</xsl:text>
        <xsl:value-of select="../../@name"/>
        <xsl:text>&lt;/i&gt;</xsl:text>
        <xsl:choose>
          <xsl:when test="position() &lt; last()-1"><xsl:text>, </xsl:text></xsl:when>
          <xsl:when test="position() = last()-1"><xsl:text> and </xsl:text></xsl:when>
        </xsl:choose>
      </xsl:for-each>
      <xsl:text>.
   * In this case, the entity cannot be removed.
   */
</xsl:text>
    </xsl:if>

    <xsl:text>  @Override
  protected void checkRemoveConstraints(PVDbConnection pcon) throws PVException, PVExceptionRemoveConstraint {
    super.checkRemoveConstraints(pcon);

    PVQueryBuilder qb;
    PVDbPreparedStatement stmt;
    int intObjCount;

</xsl:text>
    <xsl:for-each select="$foreign-key-check">
      <xsl:variable name="foreign-entity" select="../../@name"/>

      <xsl:text>    // Check Table </xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text>
    qb = new PVQueryBuilder("COUNT(*)", "</xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text>", "</xsl:text>
      <xsl:value-of select="attribute-ref/@attribute"/><xsl:text>=?");
    stmt = pcon.prepareStatement(qb);
    stmt.setInt(1, this.get</xsl:text><xsl:value-of select="attribute-ref/@foreign-attribute"/><xsl:text>());
    intObjCount = stmt.executeScalarInt();
    stmt.close();
    if (intObjCount!=0) {
      throw new PVExceptionRemoveConstraint("</xsl:text><xsl:value-of select="$entity"/><xsl:text>", "</xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text>", "</xsl:text>
      <xsl:call-template name="replace-string">
        <xsl:with-param name="text" select="$generate-entity/remove-constraint-messages/remove-constraint-message[@foreign-entity=$foreign-entity]"/>
        <xsl:with-param name="replace">&quot;</xsl:with-param>
        <xsl:with-param name="with">\&quot;</xsl:with-param>
      </xsl:call-template>
      <xsl:text>");
    }

</xsl:text>

    </xsl:for-each>
    <xsl:text>  }

</xsl:text>

  </xsl:if>

  <!-- Cascading Deletes -->
  <xsl:if test="$foreign-key-cascading-delete">
    <xsl:if test="$generate-comments">
      <xsl:text>  /**
   * Automatically removes dependent objects in Table</xsl:text>
      <xsl:if test="count($foreign-key-cascading-delete) &gt; 1"><xsl:text>s</xsl:text></xsl:if><xsl:text> </xsl:text>
      <xsl:for-each select="$foreign-key-cascading-delete">
        <xsl:text>&lt;i&gt;</xsl:text>
        <xsl:value-of select="../../@name"/>
        <xsl:text>&lt;/i&gt;</xsl:text>
        <xsl:choose>
          <xsl:when test="position() &lt; last()-1"><xsl:text>, </xsl:text></xsl:when>
          <xsl:when test="position() = last()-1"><xsl:text> and </xsl:text></xsl:when>
        </xsl:choose>
      </xsl:for-each>
      <xsl:text>.
   */
</xsl:text>
    </xsl:if>

    <xsl:text>  @Override
  protected void removeDependentObjects(PVDbConnection pcon) throws PVExceptionDbConcurrency, PVExceptionRemoveConstraint, PVException {

</xsl:text>
    <xsl:for-each select="$foreign-key-cascading-delete">
      <xsl:text>    // Remove from table </xsl:text><xsl:value-of select="../../@name"/><xsl:text>.
    java.util.List&lt;</xsl:text><xsl:value-of select="../../@name"/><xsl:text>&gt; a</xsl:text>
      <xsl:value-of select="../../@name"/><xsl:value-of select="position()"/><xsl:text> = </xsl:text>
      <xsl:value-of select="../../@name"/><xsl:text>Home.findBy</xsl:text>
      <xsl:choose>
        <xsl:when test="substring(attribute-ref/@attribute,string-length(attribute-ref/@attribute)-1)='ID'"><xsl:value-of select="substring(attribute-ref/@attribute, 1, string-length(attribute-ref/@attribute)-2)"/></xsl:when>
        <xsl:otherwise><xsl:value-of select="attribute-ref/@attribute"/></xsl:otherwise>
      </xsl:choose>
      <xsl:text>(this.get</xsl:text><xsl:value-of select="attribute-ref/@foreign-attribute"/><xsl:text>(), pcon);
    for (</xsl:text><xsl:value-of select="../../@name"/><xsl:text> dbo : a</xsl:text><xsl:value-of select="../../@name"/><xsl:value-of select="position()"/><xsl:text>) {
      dbo.remove(pcon);
    }

</xsl:text>
    </xsl:for-each>
    <xsl:text>  }

</xsl:text>
  </xsl:if>

</xsl:template>


<!-- ***** Enumeration generieren ***** -->
<xsl:template match="entity" mode="enumeration">

  <!-- Enumerations-Items -->
  <xsl:for-each select="$generate-entity/enumeration-entries/enumeration-entry[@generate='true']">
    <xsl:sort select="@identifier"/>
    <xsl:if test="$generate-comments and @description!=''">
      <xsl:text>  /**
   * </xsl:text><xsl:value-of select="@description"/><xsl:text>
   */
</xsl:text>
    </xsl:if>
    <xsl:text>  </xsl:text>
    <xsl:value-of select="@identifier"/>
    <xsl:text>(</xsl:text>
    <xsl:value-of select="@id"/>
    <xsl:text>, "</xsl:text>
    <xsl:call-template name="replace-string">
      <xsl:with-param name="text" select="@name"/>
      <xsl:with-param name="replace" select="'&quot;'"/>
      <xsl:with-param name="with" select="'\&quot;'"/>
    </xsl:call-template>
    <xsl:text>")</xsl:text>
    <xsl:choose>
      <xsl:when test="position() &lt; last()">,</xsl:when>
      <xsl:otherwise>;</xsl:otherwise>
    </xsl:choose>
    <xsl:text>

</xsl:text>
  </xsl:for-each>

  <xsl:text><![CDATA[
]]></xsl:text>

</xsl:template>


<!-- ***** ZusÃ¤tzliche Enumeration-Methods generieren ***** -->
<xsl:template match="entity" mode="enumeration-methods">

  <xsl:text>  private final int mID;
  private final String mName;

</xsl:text>
  <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Constructor for enum values with database mapping.
   * @param pID ID from database.
   * @param pName Name from database.
   */
</xsl:text>
  </xsl:if>
  <xsl:text>  </xsl:text><xsl:value-of select="$entity"/><xsl:text>(int pID, String pName) {
    mID = pID;
    mName = pName;
  }

</xsl:text>
  <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Returns the integer value used for this enumeration value in the database.
   * @return Integer value.
   */
</xsl:text>
  </xsl:if>
  <xsl:text>  public int getID() {
    return mID;
  }

</xsl:text>
  <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Returns the name associated with this enumeration value in the database.
   * @return Name.
   */
</xsl:text>
  </xsl:if>
  <xsl:text>  public String getName() {
    return mName;
  }

</xsl:text>
  <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Maps the ID from database to enumeration value.
   * @param pID ID.
   * @return Enumeration value. Returns null if ID = 0.
   * @throws IllegalArgumentException Is thrown if a ID is given that has no matching enumaration value.
   */
</xsl:text>
  </xsl:if>
  <xsl:text>  public static </xsl:text><xsl:value-of select="$entity"/><xsl:text> valueOf(int pID) {
    switch (pID) {
      case 0:
        return null;
</xsl:text>
  <xsl:for-each select="$generate-entity/enumeration-entries/enumeration-entry[@generate='true']">
    <xsl:sort select="@identifier"/>
    <xsl:text>      case </xsl:text><xsl:value-of select="@id"/><xsl:text>:
        return </xsl:text><xsl:value-of select="@identifier"/><xsl:text>;
</xsl:text>
  </xsl:for-each>
  <xsl:text>      default:
        throw new IllegalArgumentException("Invalid enumeration ID: " + pID);
    }
  }

</xsl:text>

</xsl:template>



</xsl:stylesheet>
