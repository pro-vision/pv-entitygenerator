<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  version="1.0"
>

<xsl:import href="platform_defaults.xsl"/>

<xsl:output method="text" encoding="UTF-8"/>


<xsl:template match="/">
  <xsl:apply-templates select="$db-definition/entities/entity[@name=$entity]"/>
</xsl:template>



<!-- ***** Class File generieren ***** -->
<xsl:template match="entity">
<xsl:if test="$generate-entity/parameters/parameter[@name='generate-entity']='true'
    and $platform/parameters/parameter[@name='generate-unittest']='true'">

  <!-- File Header, package, import statements -->
  <xsl:value-of select="$platform/parameters/parameter[@name='file-header']"/>
  <xsl:if test="$generate-checkstyle-suppress-comments">
    <xsl:text>//CHECKSTYLE:OFF
</xsl:text>
  </xsl:if>
  <xsl:text>
package </xsl:text><xsl:value-of select="$platform/parameters/parameter[@name='dao-unittest-package']"/><xsl:text>;

import org.junit.*;

import </xsl:text><xsl:value-of select="$platform/parameters/parameter[@name='entity-package']"/><xsl:text>.*;

</xsl:text>

  <!-- Class-Kommentar -->
  <xsl:if test="$generate-comments">
    <xsl:text>/**
 * Unit Test Case for DAO class for entity &lt;code&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/code&gt;.
 * @see </xsl:text><xsl:value-of select="$entity"/><xsl:text>
 * @author Generated by PVEntityGenerator
 */
</xsl:text>
  </xsl:if>

  <!-- Class Beginn -->
  <xsl:text>public class </xsl:text><xsl:value-of select="$entity"/><xsl:text>DAOTest extends </xsl:text>
  <xsl:value-of select="$platform/parameters/parameter[@name='unittest-baseclass']"/><xsl:text> {

</xsl:text>
  <xsl:choose>
    <xsl:when test="$generate-spring-annotations">
      <xsl:text>  @org.springframework.beans.factory.annotation.Autowired
  private </xsl:text><xsl:value-of select="$entity"/><xsl:text>DAO mDAO = null;

  protected </xsl:text><xsl:value-of select="$entity"/><xsl:text>DAO getDAO() {
    return mDAO;
  }

</xsl:text>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>  protected </xsl:text><xsl:value-of select="$entity"/><xsl:text>DAO getDAO() {
    return new </xsl:text><xsl:value-of select="$entity"/><xsl:text>DAO(getEntityManager());
  }

</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
  <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Test object instance.
   */
</xsl:text>
  </xsl:if>
  <xsl:text>  @Test
  public void testObjectInstance() {
    </xsl:text><xsl:value-of select="$dao-class"/><xsl:text> dao = new </xsl:text><xsl:value-of select="$dao-class"/><xsl:text>();
    org.junit.Assert.assertEquals(</xsl:text><xsl:value-of select="$entity"/><xsl:text>.class, dao.getEntityBeanType());
    </xsl:text><xsl:value-of select="$dao-class"/><xsl:text> dao2 = new </xsl:text><xsl:value-of select="$dao-class"/><xsl:text>(getEntityManager());
    org.junit.Assert.assertEquals(</xsl:text><xsl:value-of select="$entity"/><xsl:text>.class, dao2.getEntityBeanType());
    org.junit.Assert.assertNotNull(dao2.getEntityManager());
  }

</xsl:text>


  <!-- Test Remove Constraints/Cascading Deletes -->
  <xsl:apply-templates select="." mode="test-remove-constraints"/>
  <xsl:apply-templates select="." mode="test-cascading-delete"/>

  <!-- Test foreign key find methods -->
  <xsl:apply-templates select="." mode="test-find-foreign-key"/>

  <!-- Test custom find methods -->
  <xsl:apply-templates select="." mode="test-find-custom"/>


  <!-- Placeholder for manual class extensions -->
  <xsl:if test="$generate-checkstyle-suppress-comments">
    <xsl:text>//CHECKSTYLE:ON
</xsl:text>
  </xsl:if>
  <xsl:text>//+++ Custom class extensions START +++
// To prevent deleting your changes from PVEntityGenerator put your manual class extensions only here

//+++ Custom class extensions END +++
</xsl:text>

  <!-- Class End -->
  <xsl:text>

}
</xsl:text>

</xsl:if>
</xsl:template>


<!-- ***** Test Remove Constraints ***** -->
<xsl:template match="entity" mode="test-remove-constraints">
  <xsl:variable name="foreign-key-check" select="key('foreign-key-check', $entity)"/>
  <xsl:variable name="foreign-key-cascading-delete" select="key('foreign-key-cascading-delete', $entity)"/>
  <xsl:variable name="ent" select="."/>

  <xsl:if test="$foreign-key-check and $generate-entity/parameters/parameter[@name='generate-removecheck']='true'">
    <xsl:for-each select="$foreign-key-check">
      <xsl:variable name="foreign-entity" select="../.."/>

  <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Test check remove constraints.
   * @throws Exception
   */
</xsl:text>
  </xsl:if>
      <xsl:text>  @Test
  public void testCheckRemoveConstraints</xsl:text><xsl:value-of select="position()"/>
      <xsl:text>_</xsl:text><xsl:value-of select="$foreign-entity/@name"/>
      <xsl:text>() throws Exception {
    // create test records
</xsl:text>
      <xsl:apply-templates select="$ent" mode="test-createrecord">
        <xsl:with-param name="variable" select="'dbo1'"/>
      </xsl:apply-templates>
      <xsl:apply-templates select="$foreign-entity" mode="test-createrecord">
        <xsl:with-param name="variable" select="'dbo2'"/>
      </xsl:apply-templates>

      <xsl:variable name="attribute-name">
        <xsl:apply-templates select="$foreign-entity/attributes/attribute[@name=current()/attribute-ref/@attribute]" mode="attribute-name">
          <xsl:with-param name="foreign-key" select="."/>
        </xsl:apply-templates>
      </xsl:variable>

      <xsl:text>
    dbo2.set</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>(dbo1);
    getEntityManager().persist(dbo2);
    getEntityManager().flush();

    // check constraint
    String constraintEntity = null;
    try {
      getDAO().remove(dbo1);
      getEntityManager().flush();
    }
    catch (de.provision.framework.jpa.RemoveConstraintException ex) {
      constraintEntity = ex.getConstraintEntity();
    }
    org.junit.Assert.assertEquals("Entity name", "</xsl:text><xsl:value-of select="$foreign-entity/@name"/><xsl:text>", constraintEntity);

    // remove constraint entity
    getEntityManager().remove(dbo2);
    getEntityManager().flush();

    // remove main entity (should now complete without exception)
    getDAO().remove(dbo1);
    getEntityManager().flush();
  }

</xsl:text>

    </xsl:for-each>
  </xsl:if>

</xsl:template>


<!-- ***** Test Cascading Deletes ***** -->
<xsl:template match="entity" mode="test-cascading-delete">
  <xsl:variable name="foreign-key-check" select="key('foreign-key-check', $entity)"/>
  <xsl:variable name="foreign-key-cascading-delete" select="key('foreign-key-cascading-delete', $entity)"/>
  <xsl:variable name="ent" select="."/>

  <!-- Cascading Deletes -->
  <xsl:if test="$foreign-key-cascading-delete">
    <xsl:for-each select="$foreign-key-cascading-delete">
      <xsl:variable name="foreign-entity" select="../.."/>

      <xsl:if test="$generate-comments">
        <xsl:text>  /**
   * Test remove dependent objects
   * @throws Exception
   */
</xsl:text>
      </xsl:if>
      <xsl:text>  @Test
  public void testRemoveDependentObjects</xsl:text><xsl:value-of select="position()"/>
      <xsl:text>_</xsl:text><xsl:value-of select="$foreign-entity/@name"/>
      <xsl:text>() throws Exception {
    // create test records
</xsl:text>
      <xsl:apply-templates select="$ent" mode="test-createrecord">
        <xsl:with-param name="variable" select="'dbo1'"/>
      </xsl:apply-templates>
      <xsl:apply-templates select="$foreign-entity" mode="test-createrecord">
        <xsl:with-param name="variable" select="'dbo2'"/>
      </xsl:apply-templates>

      <xsl:variable name="attribute-name">
        <xsl:apply-templates select="$foreign-entity/attributes/attribute[@name=current()/attribute-ref/@attribute]" mode="attribute-name">
          <xsl:with-param name="foreign-key" select="."/>
        </xsl:apply-templates>
      </xsl:variable>

      <xsl:text>
    dbo2.set</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>(dbo1);
    getEntityManager().persist(dbo2);

    getEntityManager().flush();

    // test automatic remove
    getEntityManager().refresh(dbo1);
    getDAO().remove(dbo1);

    </xsl:text><xsl:value-of select="$foreign-entity/@name"/><xsl:text> dbo3 = getEntityManager().find(</xsl:text>
    <xsl:value-of select="$foreign-entity/@name"/><xsl:text>.class, dbo2.getId());
    org.junit.Assert.assertNull("Record must be deleted", dbo3);
  }

</xsl:text>

    </xsl:for-each>
  </xsl:if>

</xsl:template>


<!-- ***** Test foreign key find methods ***** -->
<xsl:template match="entity" mode="test-find-foreign-key">

  <xsl:variable name="ent" select="."/>

  <xsl:for-each select="$ent/keys/foreign-key">
    <xsl:variable name="attribute" select="attribute-ref/@attribute"/>

    <xsl:variable name="enum-type">
      <xsl:call-template name="variable-enum-type">
        <xsl:with-param name="attribute" select="$ent/attributes/attribute[@name=$attribute]"/>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="attribute-name">
      <xsl:apply-templates select="$ent/attributes/attribute[@name=$attribute]" mode="attribute-name">
        <xsl:with-param name="foreign-key" select="."/>
        <xsl:with-param name="enum-type" select="$enum-type"/>
      </xsl:apply-templates>
    </xsl:variable>

    <xsl:variable name="attribute-variable">
      <xsl:text>p</xsl:text>
      <xsl:value-of select="$attribute-name"/>
    </xsl:variable>

    <xsl:variable name="method-name">
      <xsl:text>findBy</xsl:text>
      <xsl:value-of select="$attribute-name"/>
    </xsl:variable>

    <xsl:variable name="test-method-name">
      <xsl:text>testFindBy</xsl:text>
      <xsl:value-of select="$attribute-name"/>
    </xsl:variable>

    <xsl:variable name="value">
      <xsl:call-template name="test-test-value">
        <xsl:with-param name="attribute" select="$ent/attributes/attribute[@name=$attribute]"/>
        <xsl:with-param name="force-required" select="true()"/>
      </xsl:call-template>
    </xsl:variable>

    <!-- Generate only if no custom method with same name exists -->
    <xsl:if test="not($generate-entity/custom-find-methods/custom-find-method/@name=$method-name)">

    <xsl:if test="$generate-comments">
      <xsl:text>  /**
   * Test foreign key find method.
   * @throws Exception
   */
</xsl:text>
    </xsl:if>
    <xsl:text>  @Test
  public void </xsl:text><xsl:value-of select="$test-method-name"/><xsl:text>() throws Exception {
    // create test record
</xsl:text>
    <xsl:apply-templates select="$ent" mode="test-createrecord">
      <xsl:with-param name="variable" select="'dbo'"/>
    </xsl:apply-templates>
    <xsl:text>    dbo.set</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>(</xsl:text><xsl:value-of select="$value"/><xsl:text>);
    getDAO().persist(dbo);

    getEntityManager().flush();

    // find via findBy method
    java.util.List&lt;</xsl:text><xsl:value-of select="$entity"/>
    <xsl:text>&gt; list = getDAO().</xsl:text><xsl:value-of select="$method-name"/><xsl:text>(</xsl:text><xsl:value-of select="$value"/><xsl:text>);
    org.junit.Assert.assertTrue("found", list.contains(dbo));

    // remove test record
    getDAO().remove(dbo);

    // test call with null value
    getDAO().</xsl:text><xsl:value-of select="$method-name"/><xsl:text>(null);
  }

</xsl:text>

    </xsl:if>

  </xsl:for-each>

</xsl:template>


<!-- ***** Test custom find methods ***** -->
<xsl:template match="entity" mode="test-find-custom">
  <xsl:variable name="ent" select="."/>

  <xsl:for-each select="$generate-entity/custom-find-methods/custom-find-method[@generate-test='true']">

    <!-- Custom find with custom method attributes must be testet separately -->
    <xsl:choose>
      <xsl:when test="method-attribute[@type!='']">
        <xsl:apply-templates select="." mode="test-custom">
          <xsl:with-param name="ent" select="$ent"/>
          <xsl:with-param name="pos" select="position()-1"/>
        </xsl:apply-templates>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="." mode="test-standard">
          <xsl:with-param name="ent" select="$ent"/>
          <xsl:with-param name="pos" select="position()-1"/>
        </xsl:apply-templates>
      </xsl:otherwise>
    </xsl:choose>

  </xsl:for-each>

</xsl:template>

<xsl:template match="custom-find-method" mode="test-standard">
  <xsl:param name="ent"/>
  <xsl:param name="pos"/>

    <xsl:if test="$generate-comments">
      <xsl:text>  /**
   * Test custom find method.
   * @throws Exception
   */
</xsl:text>
    </xsl:if>
    <xsl:text>  @Test
  public void testFindCustom</xsl:text><xsl:value-of select="$pos"/><xsl:text>_</xsl:text>
    <xsl:value-of select="@name"/><xsl:text>() throws Exception {
    // create test record
</xsl:text>
    <xsl:apply-templates select="$ent" mode="test-createrecord">
      <xsl:with-param name="variable" select="'dbo'"/>
    </xsl:apply-templates>
    <xsl:for-each select="method-attribute">
      <xsl:variable name="attribute" select="$ent/attributes/attribute[@name=current()/@name]"/>

      <xsl:variable name="enum-type">
        <xsl:call-template name="variable-enum-type">
          <xsl:with-param name="attribute" select="$attribute"/>
        </xsl:call-template>
      </xsl:variable>

      <xsl:variable name="foreign-key" select="$ent/keys/foreign-key[attribute-ref/@attribute=$attribute/@name and $enum-type='']"/>

      <xsl:variable name="attribute-name">
        <xsl:apply-templates select="$attribute" mode="attribute-name">
          <xsl:with-param name="foreign-key" select="$foreign-key"/>
          <xsl:with-param name="enum-type" select="$enum-type"/>
        </xsl:apply-templates>
      </xsl:variable>

      <xsl:text>
    dbo.set</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>(</xsl:text>
      <xsl:call-template name="test-test-value">
        <xsl:with-param name="attribute" select="$attribute"/>
        <xsl:with-param name="type" select="@type"/>
        <xsl:with-param name="force-required" select="true()"/>
      </xsl:call-template>
      <xsl:text>);
</xsl:text>
    </xsl:for-each>
    <xsl:text>    getDAO().persist(dbo);

    getEntityManager().flush();

    // find via custom method
</xsl:text>

    <xsl:choose>
      <xsl:when test="@returns-multiple='true'">
        <xsl:text>    java.util.List&lt;</xsl:text><xsl:value-of select="$entity-class"/><xsl:text>&gt; list = getDAO().</xsl:text><xsl:value-of select="@name"/><xsl:text>(</xsl:text>
        <xsl:for-each select="method-attribute">
          <xsl:variable name="attribute" select="$ent/attributes/attribute[@name=current()/@name]"/>
          <xsl:call-template name="test-test-value">
            <xsl:with-param name="attribute" select="$attribute"/>
            <xsl:with-param name="type" select="@type"/>
            <xsl:with-param name="force-required" select="true()"/>
          </xsl:call-template>
          <xsl:if test="position() &lt; last()">
            <xsl:text>, </xsl:text>
          </xsl:if>
        </xsl:for-each>
        <xsl:text>);
    org.junit.Assert.assertTrue("found", list.contains(dbo));
</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text> </xsl:text>
        <xsl:text> </xsl:text>
        <xsl:text> </xsl:text>
        <xsl:text> </xsl:text>
        <xsl:value-of select="$entity-class"/><xsl:text> dbo2 = getDAO().</xsl:text><xsl:value-of select="@name"/><xsl:text>(</xsl:text>
        <xsl:for-each select="method-attribute">
          <xsl:variable name="attribute" select="$ent/attributes/attribute[@name=current()/@name]"/>
          <xsl:call-template name="test-test-value">
            <xsl:with-param name="attribute" select="$attribute"/>
            <xsl:with-param name="type" select="@type"/>
            <xsl:with-param name="force-required" select="true()"/>
          </xsl:call-template>
          <xsl:if test="position() &lt; last()">
            <xsl:text>, </xsl:text>
          </xsl:if>
        </xsl:for-each>
        <xsl:text>);
    org.junit.Assert.assertEquals("test </xsl:text><xsl:value-of select="@name"/><xsl:text> method", true, dbo2!=null);
</xsl:text>
      </xsl:otherwise>
    </xsl:choose>

    <xsl:text>
    // remove test record
    getDAO().remove(dbo);
  }

</xsl:text>

</xsl:template>

<xsl:template match="custom-find-method" mode="test-custom">
  <xsl:param name="ent"/>
  <xsl:param name="pos"/>

    <xsl:if test="$generate-comments">
      <xsl:text>  /**
   * Test custom find method.
   * @throws Exception
   */
</xsl:text>
    </xsl:if>
    <xsl:text>  @Test
  public void testFindCustom</xsl:text><xsl:value-of select="$pos"/><xsl:text>_</xsl:text>
    <xsl:value-of select="@name"/><xsl:text>() throws Exception {
    // only call custom find method with custom parameters
    getDAO().</xsl:text><xsl:value-of select="@name"/><xsl:text>(</xsl:text>
    <xsl:for-each select="method-attribute">
      <xsl:variable name="attribute" select="$ent/attributes/attribute[@name=current()/@name]"/>
      <xsl:call-template name="test-test-value">
        <xsl:with-param name="attribute" select="$attribute"/>
        <xsl:with-param name="type" select="@type"/>
        <xsl:with-param name="force-required" select="true()"/>
      </xsl:call-template>
      <xsl:if test="position() &lt; last()">
        <xsl:text>, </xsl:text>
      </xsl:if>
    </xsl:for-each>
    <xsl:text>);
  }

</xsl:text>

</xsl:template>


</xsl:stylesheet>
