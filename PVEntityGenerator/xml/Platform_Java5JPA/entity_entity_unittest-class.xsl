<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  version="1.0"
>

<xsl:import href="platform_defaults.xsl"/>

<xsl:output method="text" encoding="UTF-8"/>


<xsl:template match="/">
  <xsl:apply-templates select="$db-definition/entities/entity[@name=$entity]"/>
</xsl:template>



<!-- ***** Class File generieren ***** -->
<xsl:template match="entity">
<xsl:if test="($generate-entity/parameters/parameter[@name='generate-entity']='true'
    or $generate-entity/parameters/parameter[@name='generate-enumeration']='true')
    and $platform/parameters/parameter[@name='generate-unittest']='true'">

  <!-- File Header, package, import statements -->
  <xsl:value-of select="$platform/parameters/parameter[@name='file-header']"/>
  <xsl:if test="$generate-checkstyle-suppress-comments">
    <xsl:text>//CHECKSTYLE:OFF
</xsl:text>
  </xsl:if>
  <xsl:text>
package </xsl:text><xsl:value-of select="$platform/parameters/parameter[@name='entity-unittest-package']"/><xsl:text>;

import org.junit.*;

</xsl:text>

  <!-- Class-Kommentar -->
  <xsl:if test="$generate-comments">
    <xsl:text>/**
 * Unit Test Case for Entity &lt;code&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/code&gt;.
 * @see </xsl:text><xsl:value-of select="$entity"/><xsl:text>
 * @author Generated by PVEntityGenerator
 */
</xsl:text>
  </xsl:if>

  <!-- Class Beginn -->
  <xsl:text>public class </xsl:text><xsl:value-of select="$entity"/><xsl:text>Test extends </xsl:text>
  <xsl:value-of select="$platform/parameters/parameter[@name='unittest-baseclass']"/><xsl:text> {

</xsl:text>


  <xsl:choose>
    <xsl:when test="$generate-entity/parameters/parameter[@name='generate-entity']='true'">

      <!-- Test object instance -->
      <xsl:apply-templates select="." mode="test-object-instance"/>

      <!-- Test create/store/remove & attributes -->
      <xsl:apply-templates select="." mode="test-createstoreremove-attributes"/>

      <!-- Test null-safe getter/setter -->
      <xsl:apply-templates select="." mode="test-nullsafe-getter-setter"/>

      <!-- Test Get/Add-Methods (for remote side of foreign key associations) -->
      <xsl:apply-templates select="." mode="test-foreign-key-methods"/>

      <!-- Test equals/hashcode methods -->
      <xsl:apply-templates select="." mode="test-equals-hashcode"/>

    </xsl:when>
    <xsl:when test="$generate-entity/parameters/parameter[@name='generate-enumeration']='true'">

      <!-- Test enum methods -->
      <xsl:apply-templates select="." mode="test-enum-getname"/>
      <xsl:apply-templates select="." mode="test-enum-valueof"/>

    </xsl:when>
  </xsl:choose>


  <!-- Placeholder for manual class extensions -->
  <xsl:if test="$generate-checkstyle-suppress-comments">
    <xsl:text>//CHECKSTYLE:ON
</xsl:text>
  </xsl:if>
  <xsl:text>//+++ Custom class extensions START +++
// To prevent deleting your changes from PVEntityGenerator put your manual class extensions only here

//+++ Custom class extensions END +++
</xsl:text>

  <!-- Class End -->
  <xsl:text>
}
</xsl:text>

</xsl:if>
</xsl:template>


<!-- ***** Test object instance ***** -->
<xsl:template match="entity" mode="test-object-instance">
  <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Test object instance.
   */
</xsl:text>
  </xsl:if>
  <xsl:text>  @Test
  public void testObjectInstance() {
    new </xsl:text><xsl:value-of select="$entity-class"/><xsl:text>();
  }

</xsl:text>
</xsl:template>


<!-- ***** Test create/store/remove & attributes ***** -->
<xsl:template match="entity" mode="test-createstoreremove-attributes">
  <xsl:variable name="entity-element" select="."/>

<xsl:if test="$generate-entity/parameters/parameter[@name='generate-home']='true' and $generate-entity/parameters/parameter[@name='generate-findbyprimarykey']='true'">
  <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Test create/store/remove and attributes.
   * @throws Exception
   */
</xsl:text>
  </xsl:if>

<xsl:text>  @Test
  public void testCreateStoreRemoveAttributes() throws Exception {
    // test create
</xsl:text>
  <xsl:apply-templates select="." mode="test-createrecord">
    <xsl:with-param name="variable" select="'dbo'"/>
  </xsl:apply-templates>
  <xsl:text>    getEntityManager().flush();

    // test default values
</xsl:text>

  <!-- test default attributes (not first attribute (primary key), not vstamp, not "@no-unittest") -->
  <xsl:for-each select="attributes/attribute[position()!=1 and @type!='VSTAMP' and not(@no-unittest='true') and not(@deprecated='true') and (@required='false' or @type!='BLOB')]">

    <xsl:variable name="enum-type">
      <xsl:call-template name="variable-enum-type">
        <xsl:with-param name="attribute" select="."/>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="foreign-key" select="$entity-element/keys/foreign-key[attribute-ref/@attribute=current()/@name and $enum-type='']"/>

    <xsl:variable name="attribute-name">
      <xsl:apply-templates select="." mode="attribute-name">
        <xsl:with-param name="foreign-key" select="$foreign-key"/>
        <xsl:with-param name="enum-type" select="$enum-type"/>
      </xsl:apply-templates>
    </xsl:variable>

    <xsl:choose>
      <xsl:when test="@xml-mapping!=''">
        <xsl:text>    org.junit.Assert.assertNotNull("test default value </xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>", dbo.get</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>());
</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>    org.junit.Assert.assertEquals("test default value </xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>", </xsl:text>
        <xsl:choose>
          <xsl:when test="@required='true' and @type!='VSTAMP' and @type!='BIT' and (@default-value='' or not(@default-value))">
            <xsl:call-template name="test-test-value">
              <xsl:with-param name="attribute" select="."/>
            </xsl:call-template>
          </xsl:when>
          <xsl:otherwise>
            <xsl:call-template name="test-default-value">
              <xsl:with-param name="attribute" select="."/>
            </xsl:call-template>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:text>, dbo.</xsl:text>
        <xsl:choose>
          <xsl:when test="@type='BIT'">is</xsl:when>
          <xsl:otherwise>get</xsl:otherwise>
        </xsl:choose>
        <xsl:value-of select="$attribute-name"/><xsl:text>()</xsl:text>
        <xsl:if test="@type='FLOAT'">
          <xsl:text>, 0.000001d</xsl:text>
        </xsl:if>
        <xsl:text>);
</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:for-each>

  <xsl:text>
    // test set methods
</xsl:text>

  <!-- test set methods (not first attribute (primary key), not vstamp, not "@no-unittest") -->
  <xsl:for-each select="attributes/attribute[position()!=1 and @type!='VSTAMP' and not(@no-unittest='true') and not(@deprecated='true')]">

    <xsl:variable name="enum-type">
      <xsl:call-template name="variable-enum-type">
        <xsl:with-param name="attribute" select="."/>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="foreign-key" select="$entity-element/keys/foreign-key[attribute-ref/@attribute=current()/@name and $enum-type='']"/>

    <xsl:variable name="attribute-name">
      <xsl:apply-templates select="." mode="attribute-name">
        <xsl:with-param name="foreign-key" select="$foreign-key"/>
        <xsl:with-param name="enum-type" select="$enum-type"/>
      </xsl:apply-templates>
    </xsl:variable>

    <xsl:choose>
      <xsl:when test="@type='BLOB'">
        <xsl:text>    byte[] abytSet_</xsl:text><xsl:value-of select="position()"/>
        <xsl:text> = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09};
    dbo.set</xsl:text><xsl:value-of select="@name"/><xsl:text>(abytSet_</xsl:text><xsl:value-of select="position()"/><xsl:text>);
</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>    dbo.set</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>(</xsl:text>
        <xsl:call-template name="test-test-value">
          <xsl:with-param name="attribute" select="."/>
        </xsl:call-template>
        <xsl:text>);
</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:for-each>

  <xsl:text>
    // test get methods
</xsl:text>

  <!-- test get methods (not first attribute (primary key), not vstamp, not "@no-unittest") -->
  <xsl:for-each select="attributes/attribute[position()!=1 and @type!='VSTAMP' and not(@no-unittest='true') and not(@deprecated='true')]">

    <xsl:variable name="enum-type">
      <xsl:call-template name="variable-enum-type">
        <xsl:with-param name="attribute" select="."/>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="foreign-key" select="$entity-element/keys/foreign-key[attribute-ref/@attribute=current()/@name and $enum-type='']"/>

    <xsl:variable name="attribute-name">
      <xsl:apply-templates select="." mode="attribute-name">
        <xsl:with-param name="foreign-key" select="$foreign-key"/>
        <xsl:with-param name="enum-type" select="$enum-type"/>
      </xsl:apply-templates>
    </xsl:variable>

    <xsl:choose>
      <xsl:when test="@xml-mapping!=''">
        <xsl:text>    org.junit.Assert.assertNotNull("test get </xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>", dbo.get</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>());
</xsl:text>
      </xsl:when>
      <xsl:when test="@type='BLOB'">
        <xsl:text>    byte[] abytGet_</xsl:text><xsl:value-of select="position()"/>
        <xsl:text> = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09};
    for (int intIndex=0; intIndex&lt;abytGet_</xsl:text><xsl:value-of select="position()"/><xsl:text>.length; intIndex++) {
      org.junit.Assert.assertEquals("test get BinaryData", abytGet_</xsl:text><xsl:value-of select="position()"/><xsl:text>[intIndex], dbo.</xsl:text>
      <xsl:choose>
        <xsl:when test="@type='BIT'">is</xsl:when>
        <xsl:otherwise>get</xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="@name"/><xsl:text>()[intIndex]);
    }
</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>    org.junit.Assert.assertEquals("test get </xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>", </xsl:text>
        <xsl:call-template name="test-test-value">
          <xsl:with-param name="attribute" select="."/>
        </xsl:call-template>
        <xsl:text>, dbo.</xsl:text>
        <xsl:choose>
          <xsl:when test="@type='BIT'">is</xsl:when>
          <xsl:otherwise>get</xsl:otherwise>
        </xsl:choose>
        <xsl:value-of select="$attribute-name"/><xsl:text>()</xsl:text>
        <xsl:if test="@type='FLOAT'">
          <xsl:text>, 0.000001d</xsl:text>
        </xsl:if>
        <xsl:text>);
</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:for-each>

  <xsl:text>
    // test store
    getEntityManager().persist(dbo);
    getEntityManager().flush();

    // test retrieve
    </xsl:text><xsl:value-of select="$entity-class"/><xsl:text> dbo2 = getEntityManager().find(</xsl:text><xsl:value-of select="$entity-class"/><xsl:text>.class, dbo.getId());
</xsl:text>

  <!-- test retrieve (not first attribute (primary key), not vstamp, not "@no-unittest") -->
  <xsl:for-each select="attributes/attribute[position()!=1 and @type!='VSTAMP' and not(@no-unittest='true') and not(@deprecated='true')]">

    <xsl:variable name="enum-type">
      <xsl:call-template name="variable-enum-type">
        <xsl:with-param name="attribute" select="."/>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="foreign-key" select="$entity-element/keys/foreign-key[attribute-ref/@attribute=current()/@name and $enum-type='']"/>

    <xsl:variable name="attribute-name">
      <xsl:apply-templates select="." mode="attribute-name">
        <xsl:with-param name="foreign-key" select="$foreign-key"/>
        <xsl:with-param name="enum-type" select="$enum-type"/>
      </xsl:apply-templates>
    </xsl:variable>

    <xsl:choose>
      <xsl:when test="@xml-mapping!=''">
        <xsl:text>    org.junit.Assert.assertNotNull("test retrieve </xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>", dbo2.get</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>());
</xsl:text>
      </xsl:when>
      <xsl:when test="@type='BLOB'">
        <xsl:text>    byte[] abytRetrieve_</xsl:text><xsl:value-of select="position()"/>
        <xsl:text> = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09};
    for (int intIndex=0; intIndex&lt;abytRetrieve_</xsl:text><xsl:value-of select="position()"/><xsl:text>.length; intIndex++) {
      org.junit.Assert.assertEquals("test retrieve BinaryData", abytRetrieve_</xsl:text><xsl:value-of select="position()"/><xsl:text>[intIndex], dbo2.</xsl:text>
      <xsl:choose>
        <xsl:when test="@type='BIT'">is</xsl:when>
        <xsl:otherwise>get</xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="@name"/><xsl:text>()[intIndex]);
    }
</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>    org.junit.Assert.assertEquals("test retrieve </xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>", </xsl:text>
        <xsl:call-template name="test-test-value">
          <xsl:with-param name="attribute" select="."/>
        </xsl:call-template>
        <xsl:text>, dbo2.</xsl:text>
        <xsl:choose>
          <xsl:when test="@type='BIT'">is</xsl:when>
          <xsl:otherwise>get</xsl:otherwise>
        </xsl:choose>
        <xsl:value-of select="$attribute-name"/><xsl:text>()</xsl:text>
        <xsl:if test="@type='FLOAT'">
          <xsl:text>, 0.000001d</xsl:text>
        </xsl:if>
        <xsl:text>);
</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:for-each>

  <xsl:text>
    // test vstamp
    org.junit.Assert.assertTrue("test vstamp", dbo2.getVStamp()&gt;=0);

    // test remove
</xsl:text>
  <xsl:for-each select="$entity-element/keys/foreign-key[@one-to-one='true']">
    <xsl:variable name="attribute" select="../../attributes/attribute[@name=current()/attribute-ref/@attribute]"/>

    <xsl:variable name="enum-type">
      <xsl:call-template name="variable-enum-type">
        <xsl:with-param name="attribute" select="$attribute"/>
      </xsl:call-template>
    </xsl:variable>

    <xsl:if test="$attribute/@required='true' and $enum-type=''">
      <xsl:variable name="attribute-name">
        <xsl:apply-templates select="$attribute" mode="attribute-name">
          <xsl:with-param name="foreign-key" select="."/>
        </xsl:apply-templates>
      </xsl:variable>
  
      <xsl:text>    dbo2.get</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>().set</xsl:text><xsl:value-of select="$entity-element/@name"/>
      <xsl:text>(null);  // workaround for removing out of one-to-one relation
</xsl:text>
    </xsl:if>
  </xsl:for-each>
  <xsl:text>    getEntityManager().remove(dbo2);
    getEntityManager().flush();

    </xsl:text><xsl:value-of select="$entity-class"/><xsl:text> dbo3 = getEntityManager().find(</xsl:text><xsl:value-of select="$entity-class"/><xsl:text>.class, dbo.</xsl:text>
    <xsl:choose>
      <xsl:when test="@type='BIT'">is</xsl:when>
      <xsl:otherwise>get</xsl:otherwise>
    </xsl:choose>
    <xsl:apply-templates select="attributes/attribute[1]" mode="attribute-name"/>
    <xsl:text>());
    org.junit.Assert.assertNull("removed", dbo3);
  }

</xsl:text>
</xsl:if>

</xsl:template>


<!-- ***** Test null-safe getter/setter ***** -->
<xsl:template match="entity" mode="test-nullsafe-getter-setter">
  <xsl:variable name="entity-element" select="."/>

<xsl:if test="$generate-entity/parameters/parameter[@name='generate-home']='true' and $generate-entity/parameters/parameter[@name='generate-findbyprimarykey']='true'">
  <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Test null-safe implementation of getters and setters
   * @throws Exception
   */
</xsl:text>
  </xsl:if>

<xsl:text>  @Test
  public void testNullSafeGetterSetter() throws Exception {
    // create empty instance
    </xsl:text><xsl:value-of select="$entity-class"/><xsl:text> dbo = new </xsl:text><xsl:value-of select="$entity-class"/><xsl:text>();

    // initialize all fields with null values
    java.lang.reflect.Field field;
</xsl:text>

  <!-- initialize all fields with null values -->
  <xsl:for-each select="attributes/attribute">

    <xsl:variable name="enum-type">
      <xsl:call-template name="variable-enum-type">
        <xsl:with-param name="attribute" select="."/>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="foreign-key" select="$entity-element/keys/foreign-key[attribute-ref/@attribute=current()/@name and $enum-type='']"/>

    <xsl:variable name="attribute-name">
      <xsl:apply-templates select="." mode="attribute-name">
        <xsl:with-param name="foreign-key" select="$foreign-key"/>
        <xsl:with-param name="enum-type" select="$enum-type"/>
      </xsl:apply-templates>
    </xsl:variable>

    <xsl:text>    field = de.provision.framework.jpa.PersistenceUtil.getPersistenceField(</xsl:text><xsl:value-of select="$entity-class"/><xsl:text>.class, "</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>");
    field.setAccessible(true);
    field.set(dbo, null);
</xsl:text>

  </xsl:for-each>

  <xsl:text>
    // test null-safe getter
</xsl:text>

  <!-- test null-safe getter -->
  <xsl:for-each select="attributes/attribute">

    <xsl:variable name="enum-type">
      <xsl:call-template name="variable-enum-type">
        <xsl:with-param name="attribute" select="."/>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="foreign-key" select="$entity-element/keys/foreign-key[attribute-ref/@attribute=current()/@name and $enum-type='']"/>

    <xsl:variable name="attribute-name">
      <xsl:apply-templates select="." mode="attribute-name">
        <xsl:with-param name="foreign-key" select="$foreign-key"/>
        <xsl:with-param name="enum-type" select="$enum-type"/>
      </xsl:apply-templates>
    </xsl:variable>

    <xsl:text>    org.junit.Assert.assertEquals("test null-safe value </xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>", </xsl:text>
    <xsl:call-template name="test-empty-value">
      <xsl:with-param name="attribute" select="."/>
    </xsl:call-template>
    <xsl:text>, dbo.</xsl:text>
    <xsl:choose>
      <xsl:when test="@type='BIT'">is</xsl:when>
      <xsl:otherwise>get</xsl:otherwise>
    </xsl:choose>
    <xsl:value-of select="$attribute-name"/><xsl:text>()</xsl:text>
    <xsl:if test="@type='FLOAT'">
      <xsl:text>, 0.000001d</xsl:text>
    </xsl:if>
    <xsl:text>);
</xsl:text>
  </xsl:for-each>

  <xsl:text>
    // call (some) null-safe getter to test for exceptions
</xsl:text>

  <!-- test (some) null-safe setter -->
  <xsl:for-each select="attributes/attribute">

    <xsl:variable name="enum-type">
      <xsl:call-template name="variable-enum-type">
        <xsl:with-param name="attribute" select="."/>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="foreign-key" select="$entity-element/keys/foreign-key[attribute-ref/@attribute=current()/@name and $enum-type='']"/>

    <xsl:variable name="attribute-name">
      <xsl:apply-templates select="." mode="attribute-name">
        <xsl:with-param name="foreign-key" select="$foreign-key"/>
        <xsl:with-param name="enum-type" select="$enum-type"/>
      </xsl:apply-templates>
    </xsl:variable>

    <xsl:if test="$enum-type!=''">
      <xsl:text>    dbo.set</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>(null);
</xsl:text>
    </xsl:if>

  </xsl:for-each>

  <xsl:text>    dbo.setId(0);
  }

</xsl:text>
</xsl:if>

</xsl:template>


<!-- Test enum method: getName -->
<xsl:template match="entity" mode="test-enum-getname">
  <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Test getName method
   */
</xsl:text>
  </xsl:if>
  <xsl:text>  @Test
  public void testGetName() {
</xsl:text>

  <xsl:for-each select="$generate-entity/enumeration-entries/enumeration-entry[@generate='true']">
    <xsl:sort select="@identifier"/>
    <xsl:text>    org.junit.Assert.assertEquals("</xsl:text>
    <xsl:call-template name="replace-string">
      <xsl:with-param name="text" select="@name"/>
      <xsl:with-param name="replace" select="'&quot;'"/>
      <xsl:with-param name="with" select="'\&quot;'"/>
    </xsl:call-template>
    <xsl:text>", </xsl:text>
    <xsl:value-of select="$entity"/>
    <xsl:text>.</xsl:text>
    <xsl:value-of select="@identifier"/>
    <xsl:text>.getName());
</xsl:text>
  </xsl:for-each>

<xsl:text>  }

</xsl:text>
</xsl:template>


<!-- Test enum method: valueOf -->
<xsl:template match="entity" mode="test-enum-valueof">
  <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Test valueOf method
   */
</xsl:text>
  </xsl:if>
  <xsl:text>  @Test
  public void testValueOf() {
</xsl:text>

  <xsl:for-each select="$generate-entity/enumeration-entries/enumeration-entry[@generate='true']">
    <xsl:sort select="@identifier"/>
    <xsl:text>    org.junit.Assert.assertEquals(</xsl:text>
    <xsl:value-of select="$entity"/>
    <xsl:text>.</xsl:text>
    <xsl:value-of select="@identifier"/>
    <xsl:text>, </xsl:text><xsl:value-of select="$entity"/><xsl:text>.valueOf(</xsl:text><xsl:value-of select="@id"/><xsl:text>));
</xsl:text>
  </xsl:for-each>

  <xsl:text>
    org.junit.Assert.assertEquals(null, </xsl:text><xsl:value-of select="$entity"/><xsl:text>.valueOf(0));
    boolean exceptionThrown = false;
    try {
      </xsl:text><xsl:value-of select="$entity"/><xsl:text>.valueOf(-1);
    }
    catch (IllegalArgumentException ex) {
      exceptionThrown = true;
    }
    org.junit.Assert.assertTrue(exceptionThrown);
  }

</xsl:text>
</xsl:template>


<!-- ***** Test Get/Add-Methods (for remote side of foreign key associations) ***** -->
<xsl:template match="entity" mode="test-foreign-key-methods">
  <xsl:variable name="ent" select="."/>

  <xsl:variable name="foreign-key-check" select="key('foreign-key-check', $entity)"/>
  <xsl:variable name="foreign-key-cascading-delete" select="key('foreign-key-cascading-delete', $entity)"/>

  <xsl:for-each select="$foreign-key-check | $foreign-key-cascading-delete">
    <xsl:variable name="foreign-entity" select="../../@name"/>

    <xsl:variable name="check-skip-onetomany">
      <xsl:apply-templates select="." mode="check-skip-onetomany"/>
    </xsl:variable>
    <xsl:if test="$check-skip-onetomany!='true'">

      <xsl:variable name="enum-type">
        <xsl:call-template name="variable-enum-type">
          <xsl:with-param name="attribute" select="."/>
        </xsl:call-template>
      </xsl:variable>

      <xsl:variable name="attribute-name">
        <xsl:apply-templates select="../../attributes/attribute[@name=current()/attribute-ref/@attribute]" mode="attribute-name">
          <xsl:with-param name="foreign-key" select="."/>
          <xsl:with-param name="enum-type" select="$enum-type"/>
        </xsl:apply-templates>
      </xsl:variable>

      <xsl:if test="$enum-type=''">
        <xsl:if test="$generate-comments">
      <xsl:text>  /**
   * Test </xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text> foreign entity association
   * @throws Exception
   */
</xsl:text>
        </xsl:if>

        <xsl:text>  @Test
  public void test</xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text>() throws Exception {
</xsl:text>
    <xsl:apply-templates select="$ent" mode="test-createrecord">
      <xsl:with-param name="variable" select="'dbo'"/>
    </xsl:apply-templates>
    <xsl:text>    getEntityManager().flush();

</xsl:text>
    <xsl:choose>
    
      <!-- @OneToOne -->
      <xsl:when test="@one-to-one='true'">
        <xsl:text>    // test no references
    org.junit.Assert.assertNull(dbo.get</xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text>());

    // create foreign entity
</xsl:text>
        <xsl:apply-templates select="/pventitygenerator-data/db-definition/entities/entity[@name=$foreign-entity]" mode="test-createrecord">
          <xsl:with-param name="variable" select="'foreigndbo'"/>
        </xsl:apply-templates>
        <xsl:text>    getEntityManager().flush();

    // add foreign entity &amp; save
    dbo.set</xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text>(foreigndbo);
    getEntityManager().persist(dbo);

    // retrieve again and check foreign references
    </xsl:text><xsl:value-of select="$entity-class"/><xsl:text> dbo2 = getEntityManager().find(</xsl:text><xsl:value-of select="$entity-class"/><xsl:text>.class, dbo.getId());
    org.junit.Assert.assertNotNull(dbo2.get</xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text>());
    org.junit.Assert.assertEquals(foreigndbo, dbo2.get</xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text>());
</xsl:text>
      </xsl:when>
      
      <!-- @OneToMany -->
      <xsl:otherwise>
        <xsl:text>    // test no references
    org.junit.Assert.assertEquals(0, dbo.get</xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text>().size());

    // create foreign entity
</xsl:text>
        <xsl:apply-templates select="/pventitygenerator-data/db-definition/entities/entity[@name=$foreign-entity]" mode="test-createrecord">
          <xsl:with-param name="variable" select="'foreigndbo'"/>
        </xsl:apply-templates>
        <xsl:text>    getEntityManager().flush();

    // add foreign entity &amp; save
    dbo.add</xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text>(foreigndbo);
    getEntityManager().persist(dbo);

    // retrieve again and check foreign references
    </xsl:text><xsl:value-of select="$entity-class"/><xsl:text> dbo2 = getEntityManager().find(</xsl:text><xsl:value-of select="$entity-class"/><xsl:text>.class, dbo.getId());
    org.junit.Assert.assertEquals(1, dbo2.get</xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text>().size());
    org.junit.Assert.assertEquals(foreigndbo, dbo2.get</xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text>().iterator().next());
</xsl:text>
      </xsl:otherwise>
      
    </xsl:choose>
    <xsl:text>  }

</xsl:text>
      </xsl:if>

    </xsl:if>
  </xsl:for-each>

  <xsl:text>
</xsl:text>

</xsl:template>


<!-- equals/hashcode methods -->
<xsl:template match="entity" mode="test-equals-hashcode">

  <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Test equals
   * @throws Exception
   */
</xsl:text>
  </xsl:if>
  <xsl:text>  @Test
  public void testEquals() throws Exception {
</xsl:text>
    <xsl:apply-templates select="." mode="test-createrecord">
      <xsl:with-param name="variable" select="'dbo'"/>
      <xsl:with-param name="persist-call" select="false()"/>
      <xsl:with-param name="test-char" select="'a'"/>
    </xsl:apply-templates>
    <xsl:apply-templates select="." mode="test-createrecord">
      <xsl:with-param name="variable" select="'dbo2'"/>
      <xsl:with-param name="persist-call" select="false()"/>
      <xsl:with-param name="test-char" select="'b'"/>
    </xsl:apply-templates>
    <xsl:text>
    org.junit.Assert.assertFalse(dbo.equals(null));
    org.junit.Assert.assertFalse(dbo.equals("this is not an entity at all"));
    org.junit.Assert.assertTrue(dbo.equals(dbo));
    org.junit.Assert.assertFalse(dbo.equals(dbo2));

    getEntityManager().persist(dbo);
    getEntityManager().persist(dbo2);
    getEntityManager().flush();

    </xsl:text><xsl:value-of select="$entity"/><xsl:text> dbo3 = getEntityManager().find(</xsl:text><xsl:value-of select="$entity"/><xsl:text>.class, dbo.getId());
    org.junit.Assert.assertTrue(dbo.equals(dbo3));
    org.junit.Assert.assertFalse(dbo2.equals(dbo3));
  }

</xsl:text>

  <xsl:if test="$generate-comments">
  <xsl:text>  /**
   * Test hashcode
   * @throws Exception
   */
</xsl:text>
  </xsl:if>
  <xsl:text>  @Test
  public void testHashcode() throws Exception {
</xsl:text>
    <xsl:apply-templates select="." mode="test-createrecord">
      <xsl:with-param name="variable" select="'dbo'"/>
      <xsl:with-param name="persist-call" select="false()"/>
    </xsl:apply-templates>
    <xsl:text>    org.junit.Assert.assertTrue(dbo.hashCode() != 0);
  }

</xsl:text>

</xsl:template>


</xsl:stylesheet>
