<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  version="1.0"
>

<xsl:import href="platform_defaults.xsl"/>

<xsl:output method="text" encoding="ISO-8859-1"/>


<xsl:template match="/">
  <xsl:apply-templates select="$db-definition/entities/entity[@name=$entity]"/>
</xsl:template>



<!-- ***** Class File generieren ***** -->
<xsl:template match="entity">
<xsl:if test="$generate-entity/parameters/parameter[@name='generate-entity']='true'
    and $generate-entity/parameters/parameter[@name='generate-home']='true'">

  <!-- File Header, package, import statements -->
  <xsl:if test="$platform/parameters/parameter[@name='file-header']!=''">
    <xsl:value-of select="$platform/parameters/parameter[@name='file-header']"/>
    <xsl:text><![CDATA[
]]></xsl:text>
  </xsl:if>
  <xsl:text>using System;
using System.Data.SqlTypes;
using PVFramework;

namespace </xsl:text><xsl:value-of select="$platform/parameters/parameter[@name='entity-namespace']"/><xsl:text> {

</xsl:text>

  <!-- Class-Kommentar -->
  <xsl:if test="$generate-comments">
    <xsl:text>  /// &lt;summary&gt;
</xsl:text>
    <xsl:if test="@description">
      <xsl:text>  /// </xsl:text><xsl:value-of select="@description"/><xsl:text>&lt;br/&gt;
</xsl:text>
    </xsl:if>
    <xsl:text>  /// The class &lt;c&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>Home&lt;/c&gt; provides methods for creating and fetching entities from the table &lt;i&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/i&gt;.
  /// It extends the &lt;c&gt;PVDbObjectHome&lt;/c&gt; class.
</xsl:text>
    <xsl:if test="$generate-entity/parameters/parameter[@name='generate-entity']='true'">
      <xsl:text>  /// The class &lt;c&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/c&gt; is an object wrapper for the entities returned by the methods of this class.
  /// &lt;see cref="</xsl:text><xsl:value-of select="$platform/parameters/parameter[@name='entity-namespace']"/><xsl:text>.</xsl:text><xsl:value-of select="$entity"/><xsl:text>"/&gt;
</xsl:text>
    </xsl:if>
    <xsl:text>  /// &lt;see cref="PVFramework.PVDbObjectHome"/&gt;
  /// Generated by PVEntityGenerator
  /// &lt;/summary&gt;
</xsl:text>
  </xsl:if>

  <!-- Class Beginn -->
  <xsl:text>  public class </xsl:text><xsl:value-of select="$entity"/><xsl:text>Home : PVDbObjectHome {

    // "Home-Class" with static methods only; instancing or subclassing not allowed
    private </xsl:text><xsl:value-of select="$entity"/><xsl:text>Home() {}

</xsl:text>

  <!-- Default create methods -->
  <xsl:apply-templates select="." mode="create-default"/>

  <!-- Custom create methods -->
  <xsl:apply-templates select="." mode="create-custom"/>

  <!-- Default find methods -->
  <xsl:apply-templates select="." mode="find-default"/>

  <!-- foreign key dependent find methods -->
  <xsl:apply-templates select="." mode="find-foreign-key"/>

  <!-- custom find methods -->
  <xsl:apply-templates select="." mode="find-custom"/>

  <!-- Placeholder for manual class extensions -->
  <xsl:text>//+++ Custom class extensions START +++
// To prevent deleting your changes from PVEntityGenerator put your manual class extensions only here

//+++ Custom class extensions END +++
</xsl:text>

  <!-- Class End -->
  <xsl:text>
  }

}
</xsl:text>

</xsl:if>
</xsl:template>


<!-- ***** Default create methods ***** -->
<xsl:template match="entity" mode="create-default">

  <xsl:if test="$generate-entity/parameters/parameter[@name='generate-default-create']='true'">
    <xsl:if test="$generate-comments">
      <xsl:text>    /// &lt;summary&gt;
    /// Creates a new entity in the database and returns the &lt;c&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/c&gt; object populated with the new ID and the default values.
    /// &lt;/summary&gt;
</xsl:text>
      <xsl:for-each select="attributes/attribute[position()!=1 and @required='true' and (@default-value='' or not(@default-value)) and @type!='BIT' and @type!='VSTAMP']">
        <xsl:text>    /// &lt;param name="p</xsl:text>
        <xsl:call-template name="type-prefix">
          <xsl:with-param name="type" select="@type"/>
        </xsl:call-template>
        <xsl:value-of select="@name"/>
        <xsl:text>"&gt;Value for attribute &lt;i&gt;</xsl:text><xsl:value-of select="@name"/><xsl:text>&lt;/i&gt;.&lt;/param&gt;
</xsl:text>
      </xsl:for-each>
      <xsl:text>    /// &lt;param name="pcon"&gt;Valid database connection. Can be part of an transaction.&lt;/param&gt;
    /// &lt;returns&gt;New populated Database wrapper object.&lt;/returns&gt;
</xsl:text>
    </xsl:if>
    <xsl:text>    public static </xsl:text><xsl:value-of select="$entity"/><xsl:text> Create(</xsl:text>
    <xsl:for-each select="attributes/attribute[position()!=1 and @required='true' and (@default-value='' or not(@default-value)) and @type!='BIT' and @type!='VSTAMP']">
      <xsl:variable name="enum-type">
        <xsl:call-template name="variable-enum-type">
          <xsl:with-param name="attribute" select="."/>
          <xsl:with-param name="entity" select="../.."/>
        </xsl:call-template>
      </xsl:variable>

      <xsl:choose>
        <xsl:when test="$enum-type!=''">
          <xsl:value-of select="$enum-type"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="variable-type">
            <xsl:with-param name="type" select="@type"/>
          </xsl:call-template>
        </xsl:otherwise>
      </xsl:choose>
      <xsl:text> p</xsl:text>
      <xsl:call-template name="type-prefix">
        <xsl:with-param name="type" select="@type"/>
      </xsl:call-template>
      <xsl:value-of select="@name"/>
      <xsl:text>, </xsl:text>
    </xsl:for-each>
    <xsl:text>PVDbConnection pcon) {
      </xsl:text><xsl:value-of select="$entity"/><xsl:text> dbo = new </xsl:text><xsl:value-of select="$entity"/><xsl:text>();
</xsl:text>
    <xsl:for-each select="attributes/attribute[position()!=1 and @required='true' and (@default-value='' or not(@default-value)) and @type!='BIT' and @type!='VSTAMP']">
      <xsl:text>      dbo.</xsl:text><xsl:value-of select="@name"/><xsl:text> = p</xsl:text>
      <xsl:call-template name="type-prefix">
        <xsl:with-param name="type" select="@type"/>
      </xsl:call-template>
      <xsl:value-of select="@name"/>
      <xsl:text>;
</xsl:text>
    </xsl:for-each>
    <xsl:text>      return (</xsl:text><xsl:value-of select="@name"/><xsl:text>)</xsl:text><xsl:value-of select="@name"/><xsl:text>Home.CreateGeneric(dbo, pcon);
    }

</xsl:text>
  </xsl:if>

  <xsl:if test="$generate-entity/parameters/parameter[@name='generate-default-create-object']='true'">
    <xsl:if test="$generate-comments">
      <xsl:text>    /// &lt;summary&gt;
    /// Creates a new entity in the database and returns the &lt;c&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/c&gt; object populated with the new ID and the default values.
    /// &lt;/summary&gt;
    /// &lt;param name="pdbo"&gt;Database object containing the values for the new entity.&lt;/param&gt;
    /// &lt;param name="pcon"&gt;Valid database connection. Can be part of an transaction.&lt;/param&gt;
    /// &lt;returns&gt;New populated Database wrapper object.&lt;/returns&gt;
</xsl:text>
    </xsl:if>
    <xsl:text>    public static </xsl:text><xsl:value-of select="$entity"/><xsl:text> Create(</xsl:text>
    <xsl:value-of select="$entity"/><xsl:text> pdbo, PVDbConnection pcon) {
      return (</xsl:text><xsl:value-of select="@name"/><xsl:text>)</xsl:text><xsl:value-of select="@name"/><xsl:text>Home.CreateGeneric(pdbo, pcon);
    }

</xsl:text>
  </xsl:if>

</xsl:template>


<!-- ***** Custom create methods ***** -->
<xsl:template match="entity" mode="create-custom">

  <xsl:for-each select="$generate-entity/custom-create-methods/custom-create-method">
    <xsl:if test="$generate-comments">
      <xsl:text>    /// &lt;summary&gt;
    /// </xsl:text>
      <xsl:choose>
        <xsl:when test="@description!=''"><xsl:value-of select="@description"/></xsl:when>
        <xsl:otherwise><xsl:text>Creates a new entity in the database and returns the &lt;c&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/c&gt; object populated with the new ID, the default values and the given values.</xsl:text></xsl:otherwise>
      </xsl:choose>
      <xsl:text>
    /// &lt;/summary&gt;</xsl:text>
      <xsl:for-each select="method-attribute">
        <xsl:text>
    /// &lt;param name="p</xsl:text>
        <xsl:call-template name="type-prefix">
          <xsl:with-param name="type">
            <xsl:apply-templates select="." mode="type"/>
          </xsl:with-param>
        </xsl:call-template>
        <xsl:value-of select="@name"/>
        <xsl:text>"&gt;Value for attribute &lt;i&gt;</xsl:text><xsl:value-of select="@name"/><xsl:text>&lt;/i&gt;.&lt;/param&gt;</xsl:text>
      </xsl:for-each>

      <xsl:text>
    /// &lt;param name="pcon"&gt;Valid database connection. Can be part of an transaction.&lt;/param&gt;
    /// &lt;returns&gt;New populated Database wrapper object.&lt;/returns&gt;
</xsl:text>
    </xsl:if>
    <xsl:text>    public static </xsl:text><xsl:value-of select="$entity"/><xsl:text> </xsl:text>
    <xsl:value-of select="@name"/><xsl:text>(</xsl:text>
    <xsl:for-each select="method-attribute">
      <xsl:variable name="enum-type">
        <xsl:apply-templates select="." mode="enum-type"/>
      </xsl:variable>

      <xsl:choose>
        <xsl:when test="$enum-type!=''">
          <xsl:value-of select="$enum-type"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="variable-type">
            <xsl:with-param name="type">
              <xsl:apply-templates select="." mode="type"/>
            </xsl:with-param>
          </xsl:call-template>
        </xsl:otherwise>
      </xsl:choose>
      <xsl:text> p</xsl:text>
      <xsl:call-template name="type-prefix">
        <xsl:with-param name="type">
          <xsl:apply-templates select="." mode="type"/>
        </xsl:with-param>
      </xsl:call-template>
      <xsl:value-of select="@name"/>
      <xsl:text>, </xsl:text>
    </xsl:for-each>
    <xsl:text>PVDbConnection pcon) {
      </xsl:text><xsl:value-of select="$entity"/><xsl:text> dbo = new </xsl:text><xsl:value-of select="$entity"/><xsl:text>();
</xsl:text>
    <xsl:for-each select="method-attribute">
      <xsl:text>      dbo.</xsl:text>
      <xsl:value-of select="@name"/>
      <xsl:text> = p</xsl:text>
      <xsl:call-template name="type-prefix">
        <xsl:with-param name="type">
          <xsl:apply-templates select="." mode="type"/>
        </xsl:with-param>
      </xsl:call-template>
      <xsl:value-of select="@name"/>
      <xsl:text>;
</xsl:text>
    </xsl:for-each>
    <xsl:text>      return (</xsl:text><xsl:value-of select="$entity"/><xsl:text>)</xsl:text><xsl:value-of select="$entity"/><xsl:text>Home.CreateGeneric(dbo, pcon);
    }

</xsl:text>

  </xsl:for-each>

</xsl:template>


<!-- ***** Default find methods ***** -->
<xsl:template match="entity" mode="find-default">

  <xsl:if test="$generate-entity/parameters/parameter[@name='generate-findbyprimarykey']">
    <xsl:if test="$generate-comments">
      <xsl:text>    /// &lt;summary&gt;
    /// Searches an identy with the given primary key and returns a &lt;c&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/c&gt; object.
    /// &lt;/summary&gt;
    /// &lt;param name="pID"&gt;Primary Key.&lt;/param&gt;
    /// &lt;param name="pcon"&gt;Valid database connection. Can be part of an transaction.&lt;/param&gt;
    /// &lt;returns&gt;Populated Database wrapper object.&lt;/returns&gt;
    /// throws PVExceptionNoRecordFound Is thrown when no entity with the given primary key is found.
</xsl:text>
    </xsl:if>
    <xsl:text>    public static </xsl:text><xsl:value-of select="$entity"/><xsl:text> FindByPrimaryKey(int pID, PVDbConnection pcon) {
      return (</xsl:text><xsl:value-of select="@name"/><xsl:text>)</xsl:text><xsl:value-of select="@name"/><xsl:text>Home.FindByPrimaryKey(typeof(</xsl:text>
    <xsl:value-of select="@name"/><xsl:text>), pID, pcon);
    }

</xsl:text>
  </xsl:if>

</xsl:template>


<!-- ***** Foreign key dependend find methods ***** -->
<xsl:template match="entity" mode="find-foreign-key">

  <xsl:variable name="foreign-key-cascading-delete" select="keys/foreign-key[@cascading-delete='true']"/>
  <xsl:variable name="ent" select="."/>

  <xsl:for-each select="$foreign-key-cascading-delete">
    <xsl:variable name="attribute" select="attribute-ref/@attribute"/>
    <xsl:variable name="type" select="$ent/attributes/attribute[@name=$attribute]/@type"/>

    <xsl:variable name="method-name">
      <xsl:text>FindBy</xsl:text>
      <xsl:choose>
        <xsl:when test="substring($attribute,string-length($attribute)-1)='ID'"><xsl:value-of select="substring($attribute, 1, string-length($attribute)-2)"/></xsl:when>
        <xsl:otherwise><xsl:value-of select="$attribute"/></xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="attribute-variable">
      <xsl:text>p</xsl:text>
      <xsl:call-template name="type-prefix">
        <xsl:with-param name="type" select="$type"/>
      </xsl:call-template>
      <xsl:value-of select="$attribute"/>
    </xsl:variable>

    <!-- Generate only if no custom method with same name exists -->
    <xsl:if test="not($generate-entity/custom-find-methods/custom-find-method/@name=$method-name)">

    <xsl:if test="$generate-comments">
      <xsl:text>    /// &lt;summary&gt;
    /// Fetches entities from the database and returns an &lt;c&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/c&gt; object(s).
    /// &lt;/summary&gt;
    /// &lt;param name="</xsl:text><xsl:value-of select="$attribute-variable"/>
     <xsl:text>"&gt; Search criteria for attribute &lt;i&gt;</xsl:text><xsl:value-of select="$attribute"/><xsl:text>&lt;/i&gt;.&lt;/param&gt;
    /// &lt;param name="pcon"&gt; Valid database connection. Can be part of an transaction.&lt;/param&gt;
    /// &lt;returns&gt;Populated Database wrapper objects.&lt;/returns&gt;
</xsl:text>
    </xsl:if>

    <xsl:text>    public static </xsl:text><xsl:value-of select="$entity"/><xsl:text>[] </xsl:text>
    <xsl:value-of select="$method-name"/>
    <xsl:text>(</xsl:text>
    <xsl:call-template name="variable-type">
      <xsl:with-param name="type" select="$type"/>
    </xsl:call-template>
    <xsl:text> </xsl:text>
    <xsl:value-of select="$attribute-variable"/>
    <xsl:text>, PVDbConnection pcon) {
      PVDbPreparedStatement stmt = </xsl:text>
      <xsl:value-of select="$entity"/><xsl:text>Home.GetDbPreparedStatementMultiSelect(typeof(</xsl:text>
    <xsl:value-of select="$entity"/><xsl:text>),
        "</xsl:text><xsl:value-of select="$attribute"/><xsl:text>=?", // Where-Statement
        pcon);
</xsl:text>
    <xsl:text>      stmt.Set</xsl:text>
    <xsl:call-template name="method-type">
      <xsl:with-param name="type" select="$type"/>
    </xsl:call-template>
    <xsl:text>(1, </xsl:text>
    <xsl:value-of select="$attribute-variable"/>
    <xsl:text>);
</xsl:text>
    <xsl:text>      PVDbObject[] aresult = </xsl:text><xsl:value-of select="$entity"/><xsl:text>Home.ExecuteStatementToArray(typeof(</xsl:text>
    <xsl:value-of select="$entity"/><xsl:text>), stmt);
      stmt.Close();
</xsl:text>
    <xsl:text>      return (</xsl:text><xsl:value-of select="$entity"/><xsl:text>[])aresult;
</xsl:text>
    <xsl:text>    }

</xsl:text>

    </xsl:if>

  </xsl:for-each>
</xsl:template>


<!-- ***** Custom find methods ***** -->
<xsl:template match="entity" mode="find-custom">

  <xsl:for-each select="$generate-entity/custom-find-methods/custom-find-method">
    <xsl:if test="$generate-comments">
      <xsl:text>    /// &lt;summary&gt;
    /// </xsl:text>
      <xsl:choose>
        <xsl:when test="@description!=''"><xsl:value-of select="@description"/></xsl:when>
        <xsl:otherwise><xsl:text>Fetches entities from the database and returns an &lt;c&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/c&gt; object(s).</xsl:text></xsl:otherwise>
      </xsl:choose>
      <xsl:text>
    /// &lt;/summary&gt;</xsl:text>
      <xsl:for-each select="method-attribute">
        <xsl:text>
    /// &lt;param name="p</xsl:text>
        <xsl:call-template name="type-prefix">
          <xsl:with-param name="type">
            <xsl:apply-templates select="." mode="type"/>
          </xsl:with-param>
        </xsl:call-template>
        <xsl:value-of select="@name"/>
        <xsl:text>"&gt;Search criteria for attribute &lt;i&gt;</xsl:text><xsl:value-of select="@name"/><xsl:text>&lt;/i&gt;.&lt;/param&gt;</xsl:text>
      </xsl:for-each>

      <xsl:text>
    /// &lt;param name="pcon"&gt;Valid database connection. Can be part of an transaction.&lt;/param&gt;
</xsl:text>
      <xsl:if test="@returns-multiple='false'">
        <xsl:text>    /// &lt;exception cref="PVExceptionNoRecordFound"&gt;Is thrown when no entity with the given primary key is found.&lt;/exception&gt;
</xsl:text>
      </xsl:if>
      <xsl:text>    /// &lt;returns&gt;Populated Database wrapper object(s).&lt;/returns&gt;
</xsl:text>
    </xsl:if>
    <xsl:text>    public static </xsl:text><xsl:value-of select="$entity"/>
    <xsl:if test="@returns-multiple='true'"><xsl:text>[]</xsl:text></xsl:if>
    <xsl:text> </xsl:text>
    <xsl:value-of select="@name"/>
    <xsl:text>(</xsl:text>
    <xsl:for-each select="method-attribute">
      <xsl:call-template name="variable-type">
        <xsl:with-param name="type">
          <xsl:apply-templates select="." mode="type"/>
        </xsl:with-param>
      </xsl:call-template>
      <xsl:text> p</xsl:text>
      <xsl:call-template name="type-prefix">
        <xsl:with-param name="type">
          <xsl:apply-templates select="." mode="type"/>
        </xsl:with-param>
      </xsl:call-template>
      <xsl:value-of select="@name"/>
      <xsl:text>, </xsl:text>
    </xsl:for-each>
    <xsl:text>PVDbConnection pcon) {
      PVDbPreparedStatement stmt = </xsl:text>
    <xsl:value-of select="$entity"/><xsl:text>Home.GetDbPreparedStatementMultiSelect(typeof(</xsl:text>
    <xsl:value-of select="$entity"/><xsl:text>),
        "</xsl:text><xsl:value-of select="@where-expression"/><xsl:text>", // Where-Statement
        "</xsl:text><xsl:value-of select="@order-by-expression"/><xsl:text>", // Order By-Statement
</xsl:text>
    <xsl:if test="@returns-multiple='false'">
      <xsl:text>        1, // Return max. 1 record
</xsl:text>
    </xsl:if>
    <xsl:text>        pcon);
</xsl:text>
    <xsl:for-each select="method-attribute">
      <xsl:text>      stmt.Set</xsl:text>
      <xsl:call-template name="method-type">
        <xsl:with-param name="type">
          <xsl:apply-templates select="." mode="type"/>
        </xsl:with-param>
      </xsl:call-template>
      <xsl:text>(</xsl:text><xsl:value-of select="position()"/><xsl:text>, p</xsl:text>
      <xsl:call-template name="type-prefix">
        <xsl:with-param name="type">
          <xsl:apply-templates select="." mode="type"/>
        </xsl:with-param>
      </xsl:call-template>
      <xsl:value-of select="@name"/>
      <xsl:text>);
</xsl:text>
    </xsl:for-each>
    <xsl:text>      PVDbObject[] aresult = </xsl:text><xsl:value-of select="$entity"/><xsl:text>Home.ExecuteStatementToArray(typeof(</xsl:text>
    <xsl:value-of select="$entity"/><xsl:text>), stmt);
      stmt.Close();
</xsl:text>
    <xsl:choose>
      <xsl:when test="@returns-multiple='true'">
        <xsl:text>      return (</xsl:text><xsl:value-of select="$entity"/><xsl:text>[])aresult;
</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>      if (aresult.Length==0) {
        throw new PVExceptionNoRecordFound("[</xsl:text><xsl:value-of select="$entity"/><xsl:text>Home.</xsl:text><xsl:value-of select="@name"/><xsl:text>] No record found.");
      }
      return (</xsl:text><xsl:value-of select="$entity"/><xsl:text>)aresult[0];
</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:text>    }

</xsl:text>

  </xsl:for-each>

</xsl:template>


</xsl:stylesheet>
