<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  version="1.0"
>

<xsl:import href="platform_defaults.xsl"/>

<xsl:output method="text" encoding="ISO-8859-1"/>


<xsl:template match="/">
  <xsl:apply-templates select="$db-definition/entities/entity[@name=$entity]"/>
</xsl:template>



<!-- ***** Class File generieren ***** -->
<xsl:template match="entity">
<xsl:if test="$generate-entity/parameters/parameter[@name='generate-entity']='true'
    and $generate-entity/parameters/parameter[@name='generate-home']='true'">

  <!-- File Header, package, import statements -->
  <xsl:value-of select="$platform/parameters/parameter[@name='file-header']"/><xsl:text>
package </xsl:text><xsl:value-of select="$platform/parameters/parameter[@name='entity-package']"/><xsl:text>;

import de.provision.framework.*;

</xsl:text>

  <!-- Class-Kommentar -->
  <xsl:if test="$generate-comments">
    <xsl:text>/**
</xsl:text>
      <xsl:text> * </xsl:text><xsl:value-of select="@description"/><xsl:text>&lt;br/&gt;
</xsl:text>
    <xsl:text> * The class &lt;code&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>Home&lt;/code&gt; provides methods for creating and fetching entities from the table &lt;i&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/i&gt;.
 * It extends the &lt;code&gt;PVDbObjectHome&lt;/code&gt; class.</xsl:text>
    <xsl:if test="$generate-entity/parameters/parameter[@name='generate-entity']='true'">
      <xsl:text>
 * The class &lt;code&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/code&gt; is an object wrapper for the entities returned by the methods of this class.
 * @see </xsl:text><xsl:value-of select="$entity-class"/>
    </xsl:if>
    <xsl:text>
 * @see de.provision.framework.PVDbObjectHome
 * @author Generated by PVEntityGenerator
 */
</xsl:text>
  </xsl:if>

  <!-- Class Beginn -->
  <xsl:text>public class </xsl:text><xsl:value-of select="$entity"/><xsl:text>Home extends PVDbObjectHome {

  private </xsl:text><xsl:value-of select="$entity"/><xsl:text>Home() {
    // "Home-Class" with static methods only; instancing or subclassing not allowed
  }

</xsl:text>

  <!-- Default create methods -->
  <xsl:apply-templates select="." mode="create-default"/>

  <!-- Custom create methods -->
  <xsl:apply-templates select="." mode="create-custom"/>

  <!-- Default find methods -->
  <xsl:apply-templates select="." mode="find-default"/>

  <!-- foreign key dependent find methods -->
  <xsl:apply-templates select="." mode="find-foreign-key"/>

  <!-- custom find methods -->
  <xsl:apply-templates select="." mode="find-custom"/>

  <!-- Placeholder for manual class extensions -->
  <xsl:text>//+++ Custom class extensions START +++
// To prevent deleting your changes from PVEntityGenerator put your manual class extensions only here

//+++ Custom class extensions END +++
</xsl:text>

  <!-- Class End -->
  <xsl:text>
}
</xsl:text>

</xsl:if>
</xsl:template>


<!-- ***** Default create methods ***** -->
<xsl:template match="entity" mode="create-default">

  <xsl:if test="$generate-entity/parameters/parameter[@name='generate-default-create']='true'">
    <xsl:if test="$generate-comments">
      <xsl:text>  /**
   * Creates a new entity in the database and returns the &lt;code&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/code&gt; object populated with the new ID and the default values.
</xsl:text>
      <xsl:for-each select="attributes/attribute[position()!=1 and @required='true' and (@default-value='' or not(@default-value)) and @type!='BIT' and @type!='VSTAMP']">
        <xsl:text>   * @param p</xsl:text>
        <xsl:call-template name="type-prefix">
          <xsl:with-param name="type" select="@type"/>
        </xsl:call-template>
        <xsl:value-of select="@name"/>
        <xsl:text> Value for attribute &lt;i&gt;</xsl:text><xsl:value-of select="@name"/><xsl:text>&lt;/i&gt;.
</xsl:text>
      </xsl:for-each>
      <xsl:text>   * @param pcon Valid database connection. Can be part of an transaction.
   * @return New populated Database wrapper object.
   * @throws PVException Is thrown when a database error occurs on creation process.
   */
</xsl:text>
    </xsl:if>
    <xsl:text>  public static </xsl:text><xsl:value-of select="$entity"/><xsl:text> create(</xsl:text>
    <xsl:for-each select="attributes/attribute[position()!=1 and @required='true' and (@default-value='' or not(@default-value)) and @type!='BIT' and @type!='VSTAMP']">
      <xsl:call-template name="variable-type">
        <xsl:with-param name="type" select="@type"/>
      </xsl:call-template>
      <xsl:text> p</xsl:text>
      <xsl:call-template name="type-prefix">
        <xsl:with-param name="type" select="@type"/>
      </xsl:call-template>
      <xsl:value-of select="@name"/>
      <xsl:text>, </xsl:text>
    </xsl:for-each>
    <xsl:text>PVDbConnection pcon) throws PVException {
    </xsl:text><xsl:value-of select="$entity"/><xsl:text> dbo = new </xsl:text><xsl:value-of select="$entity"/><xsl:text>();
</xsl:text>
    <xsl:for-each select="attributes/attribute[position()!=1 and @required='true' and (@default-value='' or not(@default-value)) and @type!='BIT' and @type!='VSTAMP']">
      <xsl:text>    dbo.set</xsl:text><xsl:value-of select="@name"/><xsl:text>(p</xsl:text>
      <xsl:call-template name="type-prefix">
        <xsl:with-param name="type" select="@type"/>
      </xsl:call-template>
      <xsl:value-of select="@name"/>
      <xsl:text>);
</xsl:text>
    </xsl:for-each>
    <xsl:text>    return (</xsl:text><xsl:value-of select="@name"/><xsl:text>)createGeneric(dbo, pcon);
  }

</xsl:text>
  </xsl:if>

  <xsl:if test="$generate-entity/parameters/parameter[@name='generate-default-create-object']='true'">
    <xsl:if test="$generate-comments">
      <xsl:text>  /**
   * Creates a new entity in the database and returns the &lt;code&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/code&gt; object populated with the new ID and the default values.
   * @param pdbo Database object containing the values for the new entity.
   * @param pcon Valid database connection. Can be part of an transaction.
   * @return New populated Database wrapper object.
   * @throws PVException Is thrown when a database error occurs on creation process.
   */
</xsl:text>
    </xsl:if>
    <xsl:text>  public static </xsl:text><xsl:value-of select="$entity"/><xsl:text> create(</xsl:text>
    <xsl:value-of select="$entity"/><xsl:text> pdbo, PVDbConnection pcon) throws PVException {
    return (</xsl:text><xsl:value-of select="@name"/><xsl:text>)createGeneric(pdbo, pcon);
  }

</xsl:text>
  </xsl:if>

</xsl:template>


<!-- ***** Custom create methods ***** -->
<xsl:template match="entity" mode="create-custom">

  <xsl:for-each select="$generate-entity/custom-create-methods/custom-create-method">
    <xsl:if test="$generate-comments">
      <xsl:text>  /**
   * </xsl:text>
      <xsl:choose>
        <xsl:when test="description!=''"><xsl:value-of select="description"/></xsl:when>
        <xsl:otherwise><xsl:text>Creates a new entity in the database and returns the &lt;code&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/code&gt; object populated with the new ID, the default values and the given values.</xsl:text></xsl:otherwise>
      </xsl:choose>
      <xsl:for-each select="method-attribute">
        <xsl:text>
   * @param p</xsl:text>
        <xsl:call-template name="type-prefix">
          <xsl:with-param name="type">
            <xsl:apply-templates select="." mode="type"/>
          </xsl:with-param>
        </xsl:call-template>
        <xsl:value-of select="@name"/>
        <xsl:text> Value for attribute &lt;i&gt;</xsl:text><xsl:value-of select="@name"/><xsl:text>&lt;/i&gt;.</xsl:text>
      </xsl:for-each>

      <xsl:text>
   * @param pcon Valid database connection. Can be part of an transaction.
   * @return New populated Database wrapper object.
   * @throws PVException Is thrown when a database error occurs on creation process.
   */
</xsl:text>
    </xsl:if>
    <xsl:text>  public static </xsl:text><xsl:value-of select="$entity"/><xsl:text> </xsl:text>
    <xsl:value-of select="@name"/><xsl:text>(</xsl:text>
    <xsl:for-each select="method-attribute">
      <xsl:call-template name="variable-type">
        <xsl:with-param name="type">
          <xsl:apply-templates select="." mode="type"/>
        </xsl:with-param>
      </xsl:call-template>
      <xsl:text> p</xsl:text>
      <xsl:call-template name="type-prefix">
        <xsl:with-param name="type">
          <xsl:apply-templates select="." mode="type"/>
        </xsl:with-param>
      </xsl:call-template>
      <xsl:value-of select="@name"/>
      <xsl:text>, </xsl:text>
    </xsl:for-each>
    <xsl:text>PVDbConnection pcon) throws PVException {
    </xsl:text><xsl:value-of select="$entity"/><xsl:text> dbo = new </xsl:text><xsl:value-of select="$entity"/><xsl:text>();
</xsl:text>
    <xsl:for-each select="method-attribute">
      <xsl:text>    dbo.set</xsl:text>
      <xsl:value-of select="@name"/>
      <xsl:text>(p</xsl:text>
      <xsl:call-template name="type-prefix">
        <xsl:with-param name="type">
          <xsl:apply-templates select="." mode="type"/>
        </xsl:with-param>
      </xsl:call-template>
      <xsl:value-of select="@name"/>
      <xsl:text>);
</xsl:text>
    </xsl:for-each>
    <xsl:text>    return (</xsl:text><xsl:value-of select="$entity"/><xsl:text>)createGeneric(dbo, pcon);
  }

</xsl:text>

  </xsl:for-each>

</xsl:template>


<!-- ***** Default find methods ***** -->
<xsl:template match="entity" mode="find-default">

  <xsl:if test="$generate-entity/parameters/parameter[@name='generate-findbyprimarykey']='true'">
    <xsl:if test="$generate-comments">
      <xsl:text>  /**
   * Searches an identy with the given primary key and returns a &lt;code&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/code&gt; object.
   * @param pID Primary Key.
   * @param pcon Valid database connection. Can be part of an transaction.
   * @return Populated Database wrapper object.
   * @throws PVExceptionNoRecordFound Is thrown when no entity with the given primary key is found.
   * @throws PVException Is thrown when a database error occurs on database access.
   */
</xsl:text>
    </xsl:if>
    <xsl:text>  public static </xsl:text><xsl:value-of select="$entity"/><xsl:text> findByPrimaryKey(int pID, PVDbConnection pcon)
      throws PVExceptionNoRecordFound, PVException {
    return (</xsl:text><xsl:value-of select="@name"/><xsl:text>)findByPrimaryKey(</xsl:text>
    <xsl:value-of select="@name"/><xsl:text>.class, pID, pcon);
  }

</xsl:text>
  </xsl:if>

</xsl:template>


<!-- ***** Foreign key dependend find methods ***** -->
<xsl:template match="entity" mode="find-foreign-key">

  <xsl:variable name="foreign-key-cascading-delete" select="keys/foreign-key[@cascading-delete='true']"/>
  <xsl:variable name="ent" select="."/>

  <xsl:for-each select="$foreign-key-cascading-delete">
    <xsl:variable name="attribute" select="attribute-ref/@attribute"/>
    <xsl:variable name="type" select="$ent/attributes/attribute[@name=$attribute]/@type"/>

    <xsl:variable name="method-name">
      <xsl:text>findBy</xsl:text>
      <xsl:choose>
        <xsl:when test="substring($attribute,string-length($attribute)-1)='ID'"><xsl:value-of select="substring($attribute, 1, string-length($attribute)-2)"/></xsl:when>
        <xsl:otherwise><xsl:value-of select="$attribute"/></xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="attribute-variable">
      <xsl:text>p</xsl:text>
      <xsl:call-template name="type-prefix">
        <xsl:with-param name="type" select="$type"/>
      </xsl:call-template>
      <xsl:value-of select="$attribute"/>
    </xsl:variable>

    <!-- Generate only if no custom method with same name exists -->
    <xsl:if test="not($generate-entity/custom-find-methods/custom-find-method/@name=$method-name)">

    <xsl:if test="$generate-comments">
      <xsl:text>  /**
   * Fetches entities from the database and returns an &lt;code&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/code&gt; object(s).
   * @param </xsl:text><xsl:value-of select="$attribute-variable"/>
     <xsl:text> Search criteria for attribute &lt;i&gt;</xsl:text><xsl:value-of select="$attribute"/><xsl:text>&lt;/i&gt;.
   * @param pcon Valid database connection. Can be part of an transaction.
   * @return Populated Database wrapper objects.
   * @throws PVException Is thrown when a database error occurs on database access.
   */
</xsl:text>
    </xsl:if>

    <xsl:text>  public static </xsl:text><xsl:value-of select="$entity"/><xsl:text>[] </xsl:text>
    <xsl:value-of select="$method-name"/>
    <xsl:text>(</xsl:text>
    <xsl:call-template name="variable-type">
      <xsl:with-param name="type" select="$type"/>
    </xsl:call-template>
    <xsl:text> </xsl:text>
    <xsl:value-of select="$attribute-variable"/>
    <xsl:text>, PVDbConnection pcon) throws PVException {
    PVDbPreparedStatement stmt = getDbPreparedStatementMultiSelect(</xsl:text>
    <xsl:value-of select="$entity"/><xsl:text>.class,
      "</xsl:text><xsl:value-of select="$attribute"/><xsl:text>=?", // Where-Statement
      pcon);
</xsl:text>
    <xsl:text>    stmt.set</xsl:text>
    <xsl:call-template name="method-type">
      <xsl:with-param name="type" select="$type"/>
    </xsl:call-template>
    <xsl:text>(1, </xsl:text>
    <xsl:value-of select="$attribute-variable"/>
    <xsl:text>);
</xsl:text>
    <xsl:text>    PVDbObject[] aresult = executeStatementToArray(</xsl:text>
    <xsl:value-of select="$entity"/><xsl:text>.class, stmt);
    stmt.close();
</xsl:text>
    <xsl:text>    return (</xsl:text><xsl:value-of select="$entity"/><xsl:text>[])aresult;
</xsl:text>
    <xsl:text>  }

</xsl:text>

    </xsl:if>

  </xsl:for-each>
</xsl:template>


<!-- ***** Custom find methods ***** -->
<xsl:template match="entity" mode="find-custom">

  <xsl:for-each select="$generate-entity/custom-find-methods/custom-find-method">
    <xsl:if test="$generate-comments">
      <xsl:text>  /**
   * </xsl:text>
      <xsl:choose>
        <xsl:when test="@description!=''"><xsl:value-of select="@description"/></xsl:when>
        <xsl:otherwise><xsl:text>Fetches entities from the database and returns an &lt;code&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/code&gt; object(s).</xsl:text></xsl:otherwise>
      </xsl:choose>
      <xsl:for-each select="method-attribute">
        <xsl:text>
   * @param p</xsl:text>
        <xsl:call-template name="type-prefix">
          <xsl:with-param name="type">
            <xsl:apply-templates select="." mode="type"/>
          </xsl:with-param>
        </xsl:call-template>
        <xsl:value-of select="@name"/>
        <xsl:text> Search criteria for attribute &lt;i&gt;</xsl:text><xsl:value-of select="@name"/><xsl:text>&lt;/i&gt;.</xsl:text>
      </xsl:for-each>

      <xsl:text>
   * @param pcon Valid database connection. Can be part of an transaction.
</xsl:text>
      <xsl:if test="@returns-multiple='false'">
        <xsl:text>   * @throws PVExceptionNoRecordFound Is thrown when no entity with the given key is found.
</xsl:text>
      </xsl:if>
      <xsl:text>   * @return Populated Database wrapper object(s).
   * @throws PVException Is thrown when a database error occurs on database access.
   */
</xsl:text>
    </xsl:if>
    <xsl:text>  public static </xsl:text><xsl:value-of select="$entity"/>
    <xsl:if test="@returns-multiple='true'"><xsl:text>[]</xsl:text></xsl:if>
    <xsl:text> </xsl:text>
    <xsl:value-of select="@name"/>
    <xsl:text>(</xsl:text>
    <xsl:for-each select="method-attribute">
      <xsl:call-template name="variable-type">
        <xsl:with-param name="type">
          <xsl:apply-templates select="." mode="type"/>
        </xsl:with-param>
      </xsl:call-template>
      <xsl:text> p</xsl:text>
      <xsl:call-template name="type-prefix">
        <xsl:with-param name="type">
          <xsl:apply-templates select="." mode="type"/>
        </xsl:with-param>
      </xsl:call-template>
      <xsl:value-of select="@name"/>
      <xsl:text>, </xsl:text>
    </xsl:for-each>
    <xsl:text>PVDbConnection pcon) throws PVException</xsl:text>
    <xsl:if test="@returns-multiple='false'">
      <xsl:text>, PVExceptionNoRecordFound</xsl:text>
    </xsl:if>
    <xsl:text> {
    PVDbPreparedStatement stmt = getDbPreparedStatementMultiSelect(</xsl:text>
    <xsl:value-of select="$entity"/><xsl:text>.class,
      "</xsl:text><xsl:value-of select="@where-expression"/><xsl:text>", // Where-Statement
      "</xsl:text><xsl:value-of select="@order-by-expression"/><xsl:text>", // Order By-Statement
</xsl:text>
    <xsl:if test="inner-join">
      <xsl:variable name="tables">
        <xsl:for-each select="inner-join">
          <xsl:if test="position() &gt; 1"><xsl:text>, </xsl:text></xsl:if>
          <xsl:text>"</xsl:text>
          <xsl:value-of select="@entity"/>
          <xsl:if test="@entity-alias!=''">
            <xsl:text> </xsl:text>
            <xsl:value-of select="@entity-alias"/>
          </xsl:if>
          <xsl:text>"</xsl:text>
        </xsl:for-each>
      </xsl:variable>
      <xsl:variable name="conditions">
        <xsl:for-each select="inner-join">
          <xsl:if test="position() &gt; 1"><xsl:text>, </xsl:text></xsl:if>
          <xsl:text>"</xsl:text>
          <xsl:value-of select="@join-expression"/>
          <xsl:text>"</xsl:text>
        </xsl:for-each>
      </xsl:variable>

      <xsl:text>      "</xsl:text><xsl:value-of select="@entity-alias"/><xsl:text>", // Table alias
      new String[] { </xsl:text><xsl:value-of select="$tables"/><xsl:text> }, // Inner join table(s)
      new String[] { </xsl:text><xsl:value-of select="$conditions"/><xsl:text> }, // Inner join condition(s)
</xsl:text>
    </xsl:if>
    <xsl:if test="@returns-multiple='false'">
      <xsl:text>      1, // Return max. 1 record
</xsl:text>
    </xsl:if>
    <xsl:text>      pcon);
</xsl:text>
    <xsl:for-each select="method-attribute">
      <xsl:text>    stmt.set</xsl:text>
      <xsl:call-template name="method-type">
        <xsl:with-param name="type">
          <xsl:apply-templates select="." mode="type"/>
        </xsl:with-param>
      </xsl:call-template>
      <xsl:text>(</xsl:text><xsl:value-of select="position()"/><xsl:text>, p</xsl:text>
      <xsl:call-template name="type-prefix">
        <xsl:with-param name="type">
          <xsl:apply-templates select="." mode="type"/>
        </xsl:with-param>
      </xsl:call-template>
      <xsl:value-of select="@name"/>
      <xsl:text>);
</xsl:text>
    </xsl:for-each>
    <xsl:text>    PVDbObject[] aresult = executeStatementToArray(</xsl:text>
    <xsl:value-of select="$entity"/><xsl:text>.class, stmt);
    stmt.close();
</xsl:text>
    <xsl:choose>
      <xsl:when test="@returns-multiple='true'">
        <xsl:text>    return (</xsl:text><xsl:value-of select="$entity"/><xsl:text>[])aresult;
</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>    if (aresult.length==0) {
      throw new PVExceptionNoRecordFound("</xsl:text><xsl:value-of select="$entity"/><xsl:text>");
    }
    return (</xsl:text><xsl:value-of select="$entity"/><xsl:text>)aresult[0];
</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:text>  }

</xsl:text>

  </xsl:for-each>

</xsl:template>


</xsl:stylesheet>
