<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  version="1.0"
>

<xsl:import href="platform_defaults.xsl"/>

<xsl:output method="text" encoding="UTF-8"/>


<xsl:template match="/">
  <xsl:apply-templates select="$db-definition/entities/entity[@name=$entity]"/>
</xsl:template>



<!-- ***** Class File generieren ***** -->
<xsl:template match="entity">
<xsl:if test="$generate-entity/parameters/parameter[@name='generate-entity']='true'
    or $generate-entity/parameters/parameter[@name='generate-enumeration']='true'">

  <!-- interfaces to implement -->
  <xsl:variable name="implement-interfaces-firstpart">
    <xsl:choose>
      <xsl:when test="$generate-entity/parameters/parameter[@name='generate-enumeration']='true'">
        <xsl:text>de.provision.framework.jpa.IdEnum</xsl:text>
      </xsl:when>
      <xsl:when test="$generate-entity-platform/parameters/parameter[@name='generate-serializable']='true'">
        <xsl:text>java.io.Serializable</xsl:text>
      </xsl:when>
    </xsl:choose>
  </xsl:variable>
  <xsl:variable name="implement-interfaces">
    <xsl:value-of select="$implement-interfaces-firstpart"/>
    <xsl:if test="$generate-entity-platform/parameters/parameter[@name='implement-interfaces']!=''">
      <xsl:if test="$implement-interfaces-firstpart!=''">
        <xsl:text>, </xsl:text>
      </xsl:if>
      <xsl:value-of select="$generate-entity-platform/parameters/parameter[@name='implement-interfaces']"/>
    </xsl:if>
  </xsl:variable>

  <!-- File Header, package, import statements -->
  <xsl:value-of select="$platform/parameters/parameter[@name='file-header']"/>
  <xsl:if test="$generate-checkstyle-suppress-comments">
    <xsl:text>//CHECKSTYLE:OFF
</xsl:text>
  </xsl:if>
  <xsl:text>
package </xsl:text><xsl:value-of select="$platform/parameters/parameter[@name='entity-package']"/><xsl:text>;

</xsl:text>

  <xsl:if test="$generate-entity/parameters/parameter[@name='generate-entity']='true'">
    <xsl:text>import javax.persistence.*;

</xsl:text>
  </xsl:if>

  <!-- Class-Kommentar -->
  <xsl:if test="$generate-comments">
    <xsl:text>/**
</xsl:text>
    <xsl:choose>
      <xsl:when test="@description">
        <xsl:text> * </xsl:text><xsl:value-of select="@description"/><xsl:text>
</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text> * Entity '</xsl:text><xsl:value-of select="$entity"/><xsl:text>'
</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:choose>
      <xsl:when test="$generate-entity/parameters/parameter[@name='generate-enumeration']='true'">
        <xsl:text> * The enumeration &lt;code&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/code&gt; provides access
 * to the enumeration values from the table &lt;i&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/i&gt;.
</xsl:text>
      </xsl:when>
    </xsl:choose>
    <xsl:text> * @author Generated by PVEntityGenerator
 */
</xsl:text>
  </xsl:if>

  <!-- JPA annotations -->
  <xsl:if test="$generate-entity/parameters/parameter[@name='generate-entity']='true'">
    <xsl:text>@Entity
@Table(name = "</xsl:text><xsl:value-of select="@name"/><xsl:text>")
</xsl:text>
    <xsl:for-each select="attributes/attribute[@xml-mapping!='']">
      <xsl:text>@org.hibernate.annotations.TypeDefs({
  @org.hibernate.annotations.TypeDef(
    name="</xsl:text><xsl:value-of select="$entity"/><xsl:text>$</xsl:text><xsl:value-of select="@name"/><xsl:text>",
    typeClass=de.provision.framework.jpa.XmlMappingUserType.class,
    parameters={ @org.hibernate.annotations.Parameter(name="beanClass", value="</xsl:text><xsl:value-of select="@xml-mapping"/><xsl:text>") }
  )
})
</xsl:text>
    </xsl:for-each>

    <!-- Hibernate Search -->
    <xsl:if test="$generate-entity-platform/parameters/parameter[@name='search-index']='true'">
      <xsl:text>@org.hibernate.search.annotations.Indexed
</xsl:text>
    </xsl:if>
    <xsl:if test="$generate-entity-platform/parameters/parameter[@name='search-mapping']!=''">
      <xsl:text>@org.hibernate.search.annotations.ClassBridge(impl=</xsl:text><xsl:value-of select="$generate-entity-platform/parameters/parameter[@name='search-mapping']"/><xsl:text>.class)
</xsl:text>
    </xsl:if>
    <xsl:if test="$generate-entity-platform/parameters/parameter[@name='search-customannotations']!=''">
      <xsl:value-of select="$generate-entity-platform/parameters/parameter[@name='search-customannotations']"/><xsl:text>
</xsl:text>
    </xsl:if>
  </xsl:if>

  <!-- Class Beginn -->
  <xsl:choose>
    <xsl:when test="$generate-entity/parameters/parameter[@name='generate-entity']='true'">
      <xsl:text>public class </xsl:text><xsl:value-of select="$entity"/><xsl:text> </xsl:text>
      <xsl:if test="$implement-interfaces!=''">
        <xsl:text>implements </xsl:text>
        <xsl:value-of select="$implement-interfaces"/>
        <xsl:text> </xsl:text>
      </xsl:if>
      <xsl:text>{
</xsl:text>
      <xsl:if test="$generate-entity-platform/parameters/parameter[@name='generate-serializable']='true'">
        <xsl:text>  private static final long serialVersionUID = </xsl:text><xsl:value-of select="@hashcode"/><xsl:text>L;
</xsl:text>
      </xsl:if>
      <xsl:text>
</xsl:text>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>public enum </xsl:text><xsl:value-of select="$entity"/><xsl:text> </xsl:text>
      <xsl:if test="$implement-interfaces!=''">
        <xsl:text>implements </xsl:text>
        <xsl:value-of select="$implement-interfaces"/>
        <xsl:text> </xsl:text>
      </xsl:if>
      <xsl:text>{

</xsl:text>
    </xsl:otherwise>
  </xsl:choose>

  <xsl:if test="$generate-entity/parameters/parameter[@name='generate-enumeration']='true'">

    <!-- Enumeration -->
    <xsl:apply-templates select="." mode="enumeration"/>

  </xsl:if>

  <xsl:if test="$generate-entity/parameters/parameter[@name='generate-entity']='true'">

    <!-- Fields -->
    <xsl:apply-templates select="." mode="fields"/>

    <!-- Fields (for remote side of foreign key associations) -->
    <xsl:apply-templates select="." mode="foreign-key-fields"/>

    <!-- Constructor -->
    <xsl:apply-templates select="." mode="constructor"/>

    <!-- Get/Set-Methods -->
    <xsl:apply-templates select="." mode="get-set-methods"/>

    <!-- Get/Add-Methods (for remote side of foreign key associations) -->
    <xsl:apply-templates select="." mode="foreign-key-methods"/>

    <!-- equals/hashcode methods -->
    <xsl:apply-templates select="." mode="equals-hashcode"/>

  </xsl:if>

  <xsl:if test="$generate-entity/parameters/parameter[@name='generate-enumeration']='true'">

    <!-- Zusatzmethoden fÃ¼r Enumeration -->
    <xsl:apply-templates select="." mode="enumeration-methods"/>

  </xsl:if>

  <!-- Placeholder for manual class extensions -->
  <xsl:if test="$generate-checkstyle-suppress-comments">
    <xsl:text>//CHECKSTYLE:ON
</xsl:text>
  </xsl:if>
  <xsl:text>//+++ Custom class extensions START +++
// To prevent deleting your changes from PVEntityGenerator put your manual class extensions only here

//+++ Custom class extensions END +++
</xsl:text>

  <!-- Class End -->
  <xsl:text>
}
</xsl:text>

</xsl:if>
</xsl:template>



<!-- ***** Fields ***** -->
<xsl:template match="entity" mode="fields">
  <xsl:variable name="entity-element" select="."/>

  <xsl:for-each select="attributes/attribute">

    <xsl:variable name="enum-type">
      <xsl:call-template name="variable-enum-type">
        <xsl:with-param name="attribute" select="."/>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="foreign-key" select="$entity-element/keys/foreign-key[attribute-ref/@attribute=current()/@name and $enum-type='']"/>

    <xsl:variable name="attribute-name">
      <xsl:apply-templates select="." mode="attribute-name">
        <xsl:with-param name="foreign-key" select="$foreign-key"/>
        <xsl:with-param name="enum-type" select="$enum-type"/>
      </xsl:apply-templates>
    </xsl:variable>

    <!-- JPA annotations -->
    <xsl:if test="$entity-element/keys/primary-key/attribute-ref[@attribute=current()/@name]">
      <xsl:text>  @Id
  @GeneratedValue(strategy=</xsl:text>
  <xsl:choose>
    <xsl:when test="@auto-increment='true'">GenerationType.IDENTITY</xsl:when>
    <xsl:when test="$identity-strategy='sequence'">GenerationType.SEQUENCE, generator="<xsl:value-of select="$entity"/>"</xsl:when>
    <xsl:otherwise>GenerationType.TABLE, generator="<xsl:value-of select="$entity"/>"</xsl:otherwise>
  </xsl:choose>
  <xsl:text>)
</xsl:text>
    </xsl:if>
    <xsl:if test="@type='VSTAMP'">
      <xsl:text>  @Version
</xsl:text>
    </xsl:if>
    <xsl:if test="$foreign-key">
      <xsl:choose>
        <xsl:when test="$foreign-key/@one-to-one='true'">
          <xsl:text>  @OneToOne(fetch=FetchType.LAZY, optional=</xsl:text><xsl:value-of select="@required!='true'"/><xsl:text>)
</xsl:text>
        </xsl:when>
        <xsl:otherwise>
          <xsl:text>  @ManyToOne(fetch=FetchType.LAZY, optional=</xsl:text><xsl:value-of select="@required!='true'"/><xsl:text>)
</xsl:text>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:if>
    <xsl:if test="@type='CLOB' or @type='BLOB'">
      <xsl:text>  @Lob
</xsl:text>
    </xsl:if>
    <xsl:text>  @</xsl:text>
    <xsl:if test="$foreign-key">
      <xsl:text>Join</xsl:text>
    </xsl:if>
    <xsl:text>Column(name = "</xsl:text><xsl:value-of select="@name"/><xsl:text>"</xsl:text>
    <xsl:if test="@type='VARCHAR'">
      <xsl:text>, length=</xsl:text>
      <xsl:value-of select="@size"/>
    </xsl:if>
    <xsl:if test="@type='DECIMAL'">
      <xsl:text>, precision=</xsl:text>
      <xsl:value-of select="@size"/>
      <xsl:text>, scale=</xsl:text>
      <xsl:value-of select="@scale"/>
    </xsl:if>
    <xsl:text>)
</xsl:text>
    <xsl:if test="@required='true'">
      <xsl:text>  @de.provision.framework.jpa.annotation.Required
</xsl:text>
    </xsl:if>
    <xsl:if test="@xml-mapping!=''">
      <xsl:text>  @org.hibernate.annotations.Type(type="</xsl:text><xsl:value-of select="$entity"/><xsl:text>$</xsl:text><xsl:value-of select="@name"/><xsl:text>")
</xsl:text>
    </xsl:if>

    <!-- Hibernate search annotations -->
    <xsl:if test="$entity-element/attributes/attribute/@search-index and $entity-element/keys/primary-key/attribute-ref[@attribute=current()/@name]">
      <xsl:text>  @org.hibernate.search.annotations.DocumentId
</xsl:text>
    </xsl:if>
    <xsl:if test="@search-index and not($entity-element/keys/primary-key/attribute-ref[@attribute=current()/@name])">
      <xsl:choose>
        <xsl:when test="$foreign-key">
          <xsl:if test="@search-embed-depth>0">
            <xsl:text>  @org.hibernate.search.annotations.IndexedEmbedded(depth=</xsl:text><xsl:value-of select="@search-embed-depth"/><xsl:text>)
</xsl:text>
          </xsl:if>
        </xsl:when>
        <xsl:otherwise>
          <xsl:text>  @org.hibernate.search.annotations.Field(index=org.hibernate.search.annotations.Index.</xsl:text>
          <xsl:choose>
          <!--
            lucene 2.4.0 hat die enums entpsrechend umdefiniert, hiberante search 3.1.0.GA aber noch nicht.
            <xsl:when test="@search-index='tokenized'">ANALYZED</xsl:when>
            <xsl:when test="@search-index='un_tokenized'">NOT_ANALYZED</xsl:when>
            <xsl:when test="@search-index='no_norms'">NOT_ANALYZED_NO_NORMS</xsl:when>

            bis dahin mappen wir zurÃ¼ck falls schon "new-style" annotations in der DB gesetzt sind:
          -->
            <xsl:when test="@search-index='tokenized'">YES, analyze=org.hibernate.search.annotations.Analyze.YES</xsl:when>
            <xsl:when test="@search-index='un_tokenized'">YES, analyze=org.hibernate.search.annotations.Analyze.NO</xsl:when>
            <xsl:when test="@search-index='analyzed'">YES, analyze=org.hibernate.search.annotations.Analyze.YES</xsl:when>
            <xsl:when test="@search-index='not_analyzed'">YES, analyze=org.hibernate.search.annotations.Analyze.NO</xsl:when>
            <xsl:when test="@search-index='yes'">YES</xsl:when>
            <xsl:when test="@search-index='no'">NO</xsl:when>
            <xsl:when test="@search-index='not_analyzed_no_norms'">YES, analyze=org.hibernate.search.annotations.Analyze.NO, norms=org.hibernate.search.annotations.Norms.NO</xsl:when>
            <xsl:when test="@search-index!=''"><xsl:value-of select="translate(@search-index,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/></xsl:when>
            <xsl:otherwise>YES, analyze=org.hibernate.search.annotations.Analyze.YES</xsl:otherwise>
          </xsl:choose>
          <xsl:text>, store=org.hibernate.search.annotations.Store.</xsl:text>
          <xsl:choose>
            <xsl:when test="@search-store='yes'">YES</xsl:when>
            <xsl:when test="@search-store='no'">NO</xsl:when>
            <xsl:when test="@search-store!=''"><xsl:value-of select="translate(@search-store,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/></xsl:when>
            <xsl:otherwise>NO</xsl:otherwise>
          </xsl:choose>
          <xsl:text>)
</xsl:text>
          <xsl:if test="@search-boost">
            <xsl:text>  @org.hibernate.search.annotations.Boost(</xsl:text><xsl:value-of select="@search-boost"/><xsl:text>f)
</xsl:text>
          </xsl:if>
          <xsl:if test="@search-date-resolution">
            <xsl:text>  @org.hibernate.search.annotations.DateBridge(resolution=org.hibernate.search.annotations.Resolution.</xsl:text>
            <xsl:value-of select="translate(@search-date-resolution,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/>
            <xsl:text>)
</xsl:text>
          </xsl:if>
        </xsl:otherwise>
      </xsl:choose>
      <xsl:if test="@search-fieldbridge!=''">
        <xsl:text>  @org.hibernate.search.annotations.FieldBridge(impl=</xsl:text><xsl:value-of select="@search-fieldbridge"/><xsl:text>)
</xsl:text>
      </xsl:if>
    </xsl:if>

    <!-- field -->
    <xsl:text>  private </xsl:text>
    <xsl:choose>
      <xsl:when test="@xml-mapping!=''">
        <xsl:value-of select="@xml-mapping"/>
      </xsl:when>
      <xsl:when test="$foreign-key">
        <xsl:value-of select="$foreign-key/@foreign-entity"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="variable-type">
          <xsl:with-param name="type" select="@type"/>
          <xsl:with-param name="nullable" select="true()"/>
        </xsl:call-template>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:text> </xsl:text><xsl:value-of select="$attribute-name"/>

    <!-- default value -->
    <xsl:choose>
      <xsl:when test="@xml-mapping!=''">
        <xsl:text> = new </xsl:text><xsl:value-of select="@xml-mapping"/><xsl:text>()</xsl:text>
      </xsl:when>
      <xsl:when test="@default-value!=''">
        <xsl:variable name="value">
          <xsl:call-template name="format-type-value">
            <xsl:with-param name="type" select="@type"/>
            <xsl:with-param name="value" select="@default-value"/>
          </xsl:call-template>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="@type='TIMESTAMP'">
            <xsl:text> = getStaticDefaultValue_</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>();
  private static java.util.Date getStaticDefaultValue_</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>() {
    try {
      return </xsl:text><xsl:value-of select="$value"/><xsl:text>;
    }
    catch (java.text.ParseException ex) {
      return null;
    }
  }</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text> = </xsl:text>
            <xsl:value-of select="$value"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <xsl:when test="$enum-type!=''">
        <xsl:text> = null</xsl:text>
      </xsl:when>
      <xsl:when test="$foreign-key">
        <xsl:text> = null</xsl:text>
      </xsl:when>
      <xsl:when test="@type='VARCHAR' or @type='CLOB'">
        <xsl:text> = ""</xsl:text>
      </xsl:when>
      <xsl:when test="@type='INTEGER' or @type='SMALLINT' or @type='ID' or @type='VSTAMP'">
        <xsl:text> = 0</xsl:text>
      </xsl:when>
      <xsl:when test="@type='BIGINT'">
        <xsl:text> = 0l</xsl:text>
      </xsl:when>
      <xsl:when test="@type='FLOAT'">
        <xsl:text> = 0d</xsl:text>
      </xsl:when>
      <xsl:when test="@type='DECIMAL'">
        <xsl:text> = java.math.BigDecimal.ZERO</xsl:text>
      </xsl:when>
      <xsl:when test="@type='BIT'">
        <xsl:text> = false</xsl:text>
      </xsl:when>
      <xsl:when test="@type='TIMESTAMP'">
        <xsl:text> = null</xsl:text>
      </xsl:when>
      <xsl:when test="@type='BLOB'">
        <xsl:text> = null</xsl:text>
      </xsl:when>
    </xsl:choose>

    <xsl:if test="@type!='TIMESTAMP' or not(@default-value!='')">
      <xsl:text>;</xsl:text>
    </xsl:if>
    <xsl:text>

</xsl:text>
  </xsl:for-each>

  <xsl:text>
</xsl:text>
</xsl:template>



<!-- ***** Constructor ***** -->
<xsl:template match="entity" mode="constructor">
  <xsl:variable name="entity-element" select="."/>

  <!-- default empty constructor -->
  <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Initializes a new &lt;code&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/code&gt; object.
   */
</xsl:text>
  </xsl:if>
    <xsl:text>  public </xsl:text><xsl:value-of select="$entity"/><xsl:text>() {
    // empty constructor
  }

</xsl:text>

  <!-- default constructor with all required parameters -->
  <xsl:if test="$generate-entity/parameters/parameter[@name='generate-default-create']='true'
      and attributes/attribute[position()!=1 and @required='true' and (@default-value='' or not(@default-value)) and @type!='BIT' and @type!='VSTAMP']">
    <xsl:if test="$generate-comments">
      <xsl:text>  /**
   * Initializes a new &lt;code&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/code&gt; object.
</xsl:text>
      <xsl:for-each select="attributes/attribute[position()!=1 and @required='true' and (@default-value='' or not(@default-value)) and @type!='BIT' and @type!='VSTAMP']">
        <xsl:variable name="enum-type">
          <xsl:call-template name="variable-enum-type">
            <xsl:with-param name="attribute" select="."/>
          </xsl:call-template>
        </xsl:variable>

        <xsl:variable name="foreign-key" select="$entity-element/keys/foreign-key[attribute-ref/@attribute=current()/@name and $enum-type='']"/>

        <xsl:variable name="attribute-name">
          <xsl:apply-templates select="." mode="attribute-name">
            <xsl:with-param name="foreign-key" select="$foreign-key"/>
            <xsl:with-param name="enum-type" select="$enum-type"/>
          </xsl:apply-templates>
        </xsl:variable>

        <xsl:text>   * @param p</xsl:text>
        <xsl:value-of select="$attribute-name"/>
        <xsl:text> Value for attribute &lt;i&gt;</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>&lt;/i&gt;.
</xsl:text>
      </xsl:for-each>
      <xsl:text>   */
</xsl:text>
    </xsl:if>
    <xsl:text>  public </xsl:text><xsl:value-of select="$entity"/><xsl:text>(</xsl:text>
    <xsl:for-each select="attributes/attribute[position()!=1 and @required='true' and (@default-value='' or not(@default-value)) and @type!='BIT' and @type!='VSTAMP']">
      <xsl:variable name="enum-type">
        <xsl:call-template name="variable-enum-type">
          <xsl:with-param name="attribute" select="."/>
        </xsl:call-template>
      </xsl:variable>

      <xsl:variable name="foreign-key" select="$entity-element/keys/foreign-key[attribute-ref/@attribute=current()/@name and $enum-type='']"/>

      <xsl:variable name="attribute-name">
        <xsl:apply-templates select="." mode="attribute-name">
          <xsl:with-param name="foreign-key" select="$foreign-key"/>
          <xsl:with-param name="enum-type" select="$enum-type"/>
        </xsl:apply-templates>
      </xsl:variable>

      <xsl:choose>
        <xsl:when test="$enum-type!=''">
          <xsl:value-of select="$enum-type"/>
        </xsl:when>
        <xsl:when test="$foreign-key">
          <xsl:value-of select="$foreign-key/@foreign-entity"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="variable-type">
            <xsl:with-param name="type" select="@type"/>
          </xsl:call-template>
        </xsl:otherwise>
      </xsl:choose>
      <xsl:text> p</xsl:text>
      <xsl:value-of select="$attribute-name"/>
      <xsl:if test="position() &lt; last()">
        <xsl:text>, </xsl:text>
      </xsl:if>
    </xsl:for-each>
    <xsl:text>) {
</xsl:text>
    <xsl:for-each select="attributes/attribute[position()!=1 and @required='true' and (@default-value='' or not(@default-value)) and @type!='BIT' and @type!='VSTAMP']">
      <xsl:variable name="enum-type">
        <xsl:call-template name="variable-enum-type">
          <xsl:with-param name="attribute" select="."/>
        </xsl:call-template>
      </xsl:variable>

      <xsl:variable name="foreign-key" select="$entity-element/keys/foreign-key[attribute-ref/@attribute=current()/@name and $enum-type='']"/>

      <xsl:variable name="attribute-name">
        <xsl:apply-templates select="." mode="attribute-name">
          <xsl:with-param name="foreign-key" select="$foreign-key"/>
          <xsl:with-param name="enum-type" select="$enum-type"/>
        </xsl:apply-templates>
      </xsl:variable>

      <xsl:text>    set</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>(p</xsl:text>
      <xsl:value-of select="$attribute-name"/>
      <xsl:text>);
</xsl:text>
    </xsl:for-each>
    <xsl:text>  }

</xsl:text>
  </xsl:if>

  <!-- custom constructors -->
  <xsl:for-each select="$generate-entity/custom-create-methods/custom-create-method">
    <xsl:if test="$generate-comments">
      <xsl:text>  /**
   * </xsl:text>
      <xsl:choose>
        <xsl:when test="description!=''"><xsl:value-of select="description"/></xsl:when>
        <xsl:otherwise><xsl:text>Initializes a new &lt;code&gt;</xsl:text><xsl:value-of select="$entity"/><xsl:text>&lt;/code&gt; object.</xsl:text></xsl:otherwise>
      </xsl:choose>
      <xsl:for-each select="method-attribute">
        <xsl:variable name="enum-type">
          <xsl:call-template name="variable-enum-type">
            <xsl:with-param name="attribute" select="$entity-element/attributes/attribute[@name=current()/@name]"/>
          </xsl:call-template>
        </xsl:variable>

        <xsl:variable name="foreign-key" select="$entity-element/keys/foreign-key[attribute-ref/@attribute=current()/@name and $enum-type='']"/>

        <xsl:variable name="attribute-name">
          <xsl:apply-templates select="$entity-element/attributes/attribute[@name=current()/@name]" mode="attribute-name">
            <xsl:with-param name="foreign-key" select="$foreign-key"/>
            <xsl:with-param name="enum-type" select="$enum-type"/>
          </xsl:apply-templates>
        </xsl:variable>

        <xsl:text>
   * @param p</xsl:text>
        <xsl:value-of select="$attribute-name"/>
        <xsl:text> Value for attribute &lt;i&gt;</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>&lt;/i&gt;.</xsl:text>
      </xsl:for-each>

      <xsl:text>
   */
</xsl:text>
    </xsl:if>
    <xsl:text>  public </xsl:text><xsl:value-of select="$entity"/><xsl:text>(</xsl:text>
    <xsl:for-each select="method-attribute">
      <xsl:variable name="enum-type">
        <xsl:call-template name="variable-enum-type">
          <xsl:with-param name="attribute" select="$entity-element/attributes/attribute[@name=current()/@name]"/>
        </xsl:call-template>
      </xsl:variable>

      <xsl:variable name="foreign-key" select="$entity-element/keys/foreign-key[attribute-ref/@attribute=current()/@name and $enum-type='']"/>

      <xsl:variable name="attribute-name">
        <xsl:apply-templates select="$entity-element/attributes/attribute[@name=current()/@name]" mode="attribute-name">
          <xsl:with-param name="foreign-key" select="$foreign-key"/>
          <xsl:with-param name="enum-type" select="$enum-type"/>
        </xsl:apply-templates>
      </xsl:variable>

      <xsl:choose>
        <xsl:when test="$enum-type!=''">
          <xsl:value-of select="$enum-type"/>
        </xsl:when>
        <xsl:when test="$foreign-key">
          <xsl:value-of select="$foreign-key/@foreign-entity"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="variable-type">
            <xsl:with-param name="type">
              <xsl:apply-templates select="." mode="type"/>
            </xsl:with-param>
          </xsl:call-template>
        </xsl:otherwise>
      </xsl:choose>
      <xsl:text> p</xsl:text>
      <xsl:value-of select="$attribute-name"/>
      <xsl:if test="position() &lt; last()">
        <xsl:text>, </xsl:text>
      </xsl:if>
    </xsl:for-each>
    <xsl:text>) {
</xsl:text>
    <xsl:for-each select="method-attribute">
      <xsl:variable name="enum-type">
        <xsl:call-template name="variable-enum-type">
          <xsl:with-param name="attribute" select="$entity-element/attributes/attribute[@name=current()/@name]"/>
        </xsl:call-template>
      </xsl:variable>

      <xsl:variable name="foreign-key" select="$entity-element/keys/foreign-key[attribute-ref/@attribute=current()/@name and $enum-type='']"/>

      <xsl:variable name="attribute-name">
        <xsl:apply-templates select="$entity-element/attributes/attribute[@name=current()/@name]" mode="attribute-name">
          <xsl:with-param name="foreign-key" select="$foreign-key"/>
          <xsl:with-param name="enum-type" select="$enum-type"/>
        </xsl:apply-templates>
      </xsl:variable>

      <xsl:text>    set</xsl:text>
      <xsl:value-of select="$attribute-name"/>
      <xsl:text>(p</xsl:text>
      <xsl:value-of select="$attribute-name"/>
      <xsl:text>);
</xsl:text>
    </xsl:for-each>
    <xsl:text>  }

</xsl:text>

  </xsl:for-each>

</xsl:template>



<!-- ***** Get/Set-Methods ***** -->
<xsl:template match="entity" mode="get-set-methods">
  <xsl:variable name="entity-element" select="."/>

  <xsl:for-each select="attributes/attribute">

    <xsl:variable name="enum-type">
      <xsl:call-template name="variable-enum-type">
        <xsl:with-param name="attribute" select="."/>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="foreign-key" select="$entity-element/keys/foreign-key[attribute-ref/@attribute=current()/@name and $enum-type='']"/>

    <xsl:variable name="attribute-name">
      <xsl:apply-templates select="." mode="attribute-name">
        <xsl:with-param name="foreign-key" select="$foreign-key"/>
        <xsl:with-param name="enum-type" select="$enum-type"/>
      </xsl:apply-templates>
    </xsl:variable>

    <xsl:variable name="comment">
      <xsl:if test="$generate-comments">
        <xsl:text>  /**
   * </xsl:text>
      <xsl:choose>
        <xsl:when test="normalize-space(@description)!=''"><xsl:value-of select="normalize-space(@description)"/></xsl:when>
        <xsl:otherwise><xsl:text>Attribute '</xsl:text><xsl:value-of select="@name"/><xsl:text>'.</xsl:text></xsl:otherwise>
      </xsl:choose>
      <xsl:if test="@required='true'">
        <xsl:if test="normalize-space(@description)!='' and substring(normalize-space(@description),string-length(normalize-space(@description)))!='.'">
          <xsl:text>.</xsl:text>
        </xsl:if>
        <xsl:text> Required.</xsl:text>
      </xsl:if>
      <xsl:if test="@default-value!=''">
        <xsl:text>&lt;br&gt;
   * Default value for new objects: &lt;b&gt;</xsl:text><xsl:value-of select="@default-value"/><xsl:text>&lt;/b&gt;</xsl:text>
      </xsl:if>
    </xsl:if>
    </xsl:variable>

    <xsl:variable name="comment_get">
      <xsl:choose>
        <xsl:when test="$generate-comments">
          <xsl:value-of select="$comment"/>
          <xsl:text>
   * @return Attribute value.</xsl:text>
          <xsl:if test="@deprecated='true'">
            <xsl:text>
   * @deprecated This attribute is deprecated.</xsl:text>
          </xsl:if>
          <xsl:text>
   */
</xsl:text>
        </xsl:when>
        <xsl:when test="not($generate-comments) and @deprecated='true'">
          <xsl:text>  /**
    * @deprecated This attribute is deprecated.
    */
</xsl:text>
        </xsl:when>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="comment_set">
      <xsl:choose>
        <xsl:when test="$generate-comments">
          <xsl:value-of select="$comment"/>
          <xsl:text>
   * @param p</xsl:text>
          <xsl:text>Value Attribute value.</xsl:text>
          <xsl:if test="@deprecated='true'">
            <xsl:text>
   * @deprecated This attribute is deprecated.</xsl:text>
          </xsl:if>
          <xsl:text>
   */
</xsl:text>
        </xsl:when>
        <xsl:when test="not($generate-comments) and @deprecated='true'">
          <xsl:text>  /**
    * @deprecated This attribute is deprecated.
    */
</xsl:text>
        </xsl:when>
      </xsl:choose>
    </xsl:variable>

    <xsl:if test="$generate-entity/parameters/parameter[@name='generate-getter']='true'">

    <!-- Get Method -->
    <xsl:value-of select="$comment_get"/>
    <xsl:text>  public </xsl:text>
    <xsl:choose>
      <xsl:when test="@xml-mapping!=''">
        <xsl:value-of select="@xml-mapping"/>
      </xsl:when>
      <xsl:when test="$enum-type!=''">
        <xsl:value-of select="$enum-type"/>
      </xsl:when>
      <xsl:when test="$foreign-key">
        <xsl:value-of select="$foreign-key/@foreign-entity"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="variable-type">
          <xsl:with-param name="type" select="@type"/>
        </xsl:call-template>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:text> </xsl:text>
    <xsl:choose>
      <xsl:when test="@type='BIT'">is</xsl:when>
      <xsl:otherwise>get</xsl:otherwise>
    </xsl:choose>
    <xsl:value-of select="$attribute-name"/><xsl:text>() {
    return </xsl:text>
    <xsl:choose>
      <xsl:when test="@xml-mapping!=''">
        <xsl:text>this.</xsl:text><xsl:value-of select="$attribute-name"/>
      </xsl:when>
      <xsl:when test="$enum-type!=''">
        <xsl:value-of select="$platform/parameters/parameter[@name='entity-package']"/>
        <xsl:text>.</xsl:text>
        <xsl:value-of select="$enum-type"/>
        <xsl:text>.valueOf(</xsl:text><xsl:text>this.</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>)</xsl:text>
      </xsl:when>
      <xsl:when test="$foreign-key">
        <xsl:text>this.</xsl:text><xsl:value-of select="$attribute-name"/>
      </xsl:when>
      <xsl:when test="@type='VARCHAR' or @type='CLOB'">
        <xsl:text>this.</xsl:text><xsl:value-of select="$attribute-name"/>
        <xsl:text>!=null ? </xsl:text>
        <xsl:text>this.</xsl:text><xsl:value-of select="$attribute-name"/>
        <xsl:text> : ""</xsl:text>
      </xsl:when>
      <xsl:when test="@type='INTEGER' or @type='SMALLINT' or @type='ID' or @type='VSTAMP'">
        <xsl:text>this.</xsl:text><xsl:value-of select="$attribute-name"/>
        <xsl:text>!=null ? </xsl:text>
        <xsl:text>this.</xsl:text><xsl:value-of select="$attribute-name"/>
        <xsl:text> : 0</xsl:text>
      </xsl:when>
      <xsl:when test="@type='BIGINT'">
        <xsl:text>this.</xsl:text><xsl:value-of select="$attribute-name"/>
        <xsl:text>!=null ? </xsl:text>
        <xsl:text>this.</xsl:text><xsl:value-of select="$attribute-name"/>
        <xsl:text> : 0l</xsl:text>
      </xsl:when>
      <xsl:when test="@type='FLOAT'">
        <xsl:text>this.</xsl:text><xsl:value-of select="$attribute-name"/>
        <xsl:text>!=null ? </xsl:text>
        <xsl:text>this.</xsl:text><xsl:value-of select="$attribute-name"/>
        <xsl:text> : 0d</xsl:text>
      </xsl:when>
      <xsl:when test="@type='DECIMAL'">
        <xsl:text>this.</xsl:text><xsl:value-of select="$attribute-name"/>
        <xsl:text>!=null ? </xsl:text>
        <xsl:text>this.</xsl:text><xsl:value-of select="$attribute-name"/>
        <xsl:text> : java.math.BigDecimal.ZERO</xsl:text>
      </xsl:when>
      <xsl:when test="@type='BIT'">
        <xsl:text>this.</xsl:text><xsl:value-of select="$attribute-name"/>
        <xsl:text>!=null ? </xsl:text>
        <xsl:text>this.</xsl:text><xsl:value-of select="$attribute-name"/>
        <xsl:text> : false</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>this.</xsl:text><xsl:value-of select="$attribute-name"/>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:text>;
  }

</xsl:text>

    </xsl:if>

    <xsl:if test="$generate-entity/parameters/parameter[@name='generate-setter']='true' and $attribute-name!='VStamp'">

    <!-- Set Method -->
    <xsl:value-of select="$comment_set"/>
    <xsl:text>  public void set</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>(</xsl:text>
    <xsl:choose>
      <xsl:when test="@xml-mapping!=''">
        <xsl:value-of select="@xml-mapping"/>
      </xsl:when>
      <xsl:when test="$enum-type!=''">
        <xsl:value-of select="$enum-type"/>
      </xsl:when>
      <xsl:when test="$foreign-key">
        <xsl:value-of select="$foreign-key/@foreign-entity"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="variable-type">
          <xsl:with-param name="type" select="@type"/>
        </xsl:call-template>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:text> p</xsl:text>
    <xsl:text>Value) {
    </xsl:text>
    <xsl:text>this.</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text> = </xsl:text>
    <xsl:choose>
      <xsl:when test="$enum-type!=''">pValue!=null ? pValue.getId() : null</xsl:when>
      <xsl:otherwise>pValue</xsl:otherwise>
    </xsl:choose>
    <xsl:text>;
  }

</xsl:text>

    </xsl:if>

  </xsl:for-each>

</xsl:template>



<!-- ***** Fields (for remote side of foreign key associations) ***** -->
<xsl:template match="entity" mode="foreign-key-fields">

  <xsl:variable name="foreign-key-check" select="key('foreign-key-check', $entity)"/>
  <xsl:variable name="foreign-key-cascading-delete" select="key('foreign-key-cascading-delete', $entity)"/>

  <xsl:for-each select="$foreign-key-check | $foreign-key-cascading-delete">
    <xsl:variable name="foreign-entity" select="../../@name"/>

    <xsl:variable name="check-skip-onetomany">
      <xsl:apply-templates select="." mode="check-skip-onetomany"/>
    </xsl:variable>
    <xsl:if test="$check-skip-onetomany!='true'">

      <xsl:variable name="foreign-entity-comparator-class">
        <xsl:value-of select="key('generate-entity-platform', $foreign-entity)/parameters/parameter[@name='comparator-class']"/>
      </xsl:variable>

      <xsl:variable name="enum-type">
        <xsl:call-template name="variable-enum-type">
          <xsl:with-param name="attribute" select="."/>
        </xsl:call-template>
      </xsl:variable>

      <xsl:variable name="attribute" select="../../attributes/attribute[@name=current()/attribute-ref/@attribute]"/>

      <xsl:variable name="attribute-name">
        <xsl:apply-templates select="$attribute" mode="attribute-name">
          <xsl:with-param name="foreign-key" select="."/>
          <xsl:with-param name="enum-type" select="$enum-type"/>
        </xsl:apply-templates>
      </xsl:variable>

      <xsl:if test="$enum-type=''">
        <xsl:choose>

          <!-- @OneToOne -->
          <xsl:when test="@one-to-one='true'">
            <xsl:text>  @OneToOne(mappedBy="</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>", fetch=FetchType.LAZY</xsl:text>
            <xsl:text>, cascade={CascadeType.REFRESH,CascadeType.PERSIST,CascadeType.MERGE</xsl:text>
            <xsl:if test="@cascading-delete='true'">
              <xsl:text>,CascadeType.REMOVE</xsl:text>
            </xsl:if>
            <xsl:text>})
</xsl:text>
            <xsl:if test="$attribute/@search-index">
              <xsl:text>  @org.hibernate.search.annotations.ContainedIn
</xsl:text>
            </xsl:if>
            <xsl:text>  private </xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text> </xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text> </xsl:text>
            <xsl:text>= null;

</xsl:text>
          </xsl:when>

          <!-- @OneToMany -->
          <xsl:otherwise>
            <xsl:text>  @OneToMany(mappedBy="</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>", fetch=FetchType.LAZY</xsl:text>
            <xsl:text>, cascade={CascadeType.REFRESH,CascadeType.PERSIST,CascadeType.MERGE</xsl:text><xsl:text>}</xsl:text>
            <xsl:if test="@cascading-delete='true' and $platform/parameters/parameter[@name='jpa-version']!='1.0'">
              <xsl:text>, orphanRemoval=true</xsl:text>
            </xsl:if>
            <xsl:text>)
</xsl:text>
            <xsl:if test="@cascading-delete='true' and $platform/parameters/parameter[@name='jpa-version']='1.0'">
              <xsl:text>  @org.hibernate.annotations.Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)
</xsl:text>
            </xsl:if>
            <xsl:if test="$attribute/@search-index">
              <xsl:text>  @org.hibernate.search.annotations.ContainedIn
</xsl:text>
            </xsl:if>
            <xsl:choose>
              <xsl:when test="$foreign-entity-comparator-class!=''">
                <xsl:text>  @org.hibernate.annotations.Sort(type=org.hibernate.annotations.SortType.COMPARATOR, comparator=</xsl:text>
                <xsl:value-of select="$foreign-entity-comparator-class"/>
                <xsl:text>.class)
</xsl:text>
                <xsl:text>  private java.util.SortedSet&lt;</xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text>&gt; </xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text> </xsl:text>
                <xsl:text>= new java.util.TreeSet&lt;</xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text>&gt;(new </xsl:text><xsl:value-of select="$foreign-entity-comparator-class"/><xsl:text>());

</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text>  private java.util.Set&lt;</xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text>&gt; </xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text> </xsl:text>
                <xsl:text>= new java.util.HashSet&lt;</xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text>&gt;();

</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:otherwise>

        </xsl:choose>

      </xsl:if>

    </xsl:if>
  </xsl:for-each>

  <xsl:text>
</xsl:text>

</xsl:template>



<!-- ***** Get/Add-Methods (for remote side of foreign key associations) ***** -->
<xsl:template match="entity" mode="foreign-key-methods">

  <xsl:variable name="foreign-key-check" select="key('foreign-key-check', $entity)"/>
  <xsl:variable name="foreign-key-cascading-delete" select="key('foreign-key-cascading-delete', $entity)"/>

  <xsl:for-each select="$foreign-key-check | $foreign-key-cascading-delete">
    <xsl:variable name="foreign-entity" select="../../@name"/>

    <xsl:variable name="check-skip-onetomany">
      <xsl:apply-templates select="." mode="check-skip-onetomany"/>
    </xsl:variable>
    <xsl:if test="$check-skip-onetomany!='true'">

      <xsl:variable name="enum-type">
        <xsl:call-template name="variable-enum-type">
          <xsl:with-param name="attribute" select="."/>
        </xsl:call-template>
      </xsl:variable>

      <xsl:variable name="attribute-name">
        <xsl:apply-templates select="../../attributes/attribute[@name=current()/attribute-ref/@attribute]" mode="attribute-name">
          <xsl:with-param name="foreign-key" select="."/>
          <xsl:with-param name="enum-type" select="$enum-type"/>
        </xsl:apply-templates>
      </xsl:variable>

      <xsl:if test="$enum-type=''">
        <xsl:if test="$generate-comments">
      <xsl:text>  /**
   * Get associated </xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text> entities.
   * @return Associated </xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text> entities.
   */
</xsl:text>
        </xsl:if>

        <xsl:choose>
          <!-- @OneToOne -->
          <xsl:when test="@one-to-one='true'">
            <xsl:text>  public </xsl:text><xsl:value-of select="$foreign-entity"/>
          </xsl:when>
          <!-- @OneToMany -->
          <xsl:otherwise>
            <xsl:text>  public java.util.Set&lt;</xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text>&gt;</xsl:text>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:text> get</xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text>() {
    return this.</xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text>;
  }

</xsl:text>

        <xsl:if test="$generate-comments">
      <xsl:text>  /**
   * Add associated </xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text> entity.
   * @param pValue </xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text> entity.
   */
</xsl:text>
        </xsl:if>

        <xsl:choose>
          <!-- @OneToOne -->
          <xsl:when test="@one-to-one='true'">
            <xsl:text>  public void set</xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text>(</xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text> pValue) {
    if (pValue!=null) {
      pValue.set</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>(this);
    }
    this.</xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text> = pValue;
  }

</xsl:text>
          </xsl:when>
          <!-- @OneToMany -->
          <xsl:otherwise>
            <xsl:text>  public void add</xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text>(</xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text> pValue) {
    pValue.set</xsl:text><xsl:value-of select="$attribute-name"/><xsl:text>(this);
    this.</xsl:text><xsl:value-of select="$foreign-entity"/><xsl:text>.add(pValue);
  }

</xsl:text>
          </xsl:otherwise>
        </xsl:choose>

      </xsl:if>

    </xsl:if>
  </xsl:for-each>

  <xsl:text>
</xsl:text>

</xsl:template>



<!-- ***** Enumeration generieren ***** -->
<xsl:template match="entity" mode="enumeration">

  <!-- Enumerations-Items -->
  <xsl:for-each select="$generate-entity/enumeration-entries/enumeration-entry[@generate='true']">
    <xsl:sort select="@identifier"/>
    <xsl:if test="$generate-comments and @description!=''">
      <xsl:text>  /**
   * </xsl:text><xsl:value-of select="@description"/><xsl:text>
   */
</xsl:text>
    </xsl:if>
    <xsl:text>  </xsl:text>
    <xsl:value-of select="@identifier"/>
    <xsl:text>(</xsl:text>
    <xsl:value-of select="@id"/>
    <xsl:text>, "</xsl:text>
    <xsl:call-template name="replace-string">
      <xsl:with-param name="text" select="@name"/>
      <xsl:with-param name="replace" select="'&quot;'"/>
      <xsl:with-param name="with" select="'\&quot;'"/>
    </xsl:call-template>
    <xsl:text>")</xsl:text>
    <xsl:choose>
      <xsl:when test="position() &lt; last()">,</xsl:when>
      <xsl:otherwise>;</xsl:otherwise>
    </xsl:choose>
    <xsl:text>

</xsl:text>
  </xsl:for-each>

  <xsl:text><![CDATA[
]]></xsl:text>

</xsl:template>


<!-- ***** ZusÃ¤tzliche Enumeration-Methods generieren ***** -->
<xsl:template match="entity" mode="enumeration-methods">

  <xsl:text>  private final int mId;
  private final String mName;

</xsl:text>
  <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Constructor for enum values with database mapping.
   * @param pId ID from database.
   * @param pName Name from database.
   */
</xsl:text>
  </xsl:if>
  <xsl:text>  </xsl:text><xsl:value-of select="$entity"/><xsl:text>(int pId, String pName) {
    mId = pId;
    mName = pName;
  }

</xsl:text>
  <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Returns the integer value used for this enumeration value in the database.
   * @return Integer value.
   */
</xsl:text>
  </xsl:if>
  <xsl:text>  public int getId() {
    return mId;
  }

</xsl:text>
  <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Returns the name associated with this enumeration value in the database.
   * @return Name.
   */
</xsl:text>
  </xsl:if>
  <xsl:text>  public String getName() {
    return mName;
  }

</xsl:text>
  <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Maps the ID from database to enumeration value.
   * @param pId ID.
   * @return Enumeration value. Returns null if ID = 0.
   * @throws IllegalArgumentException Is thrown if a ID is given that has no matching enumeration value.
   */
</xsl:text>
  </xsl:if>
  <xsl:text>  public static </xsl:text><xsl:value-of select="$entity"/><xsl:text> valueOf(Integer pId) {
    if (pId==null) {
      return null;
    }
    switch (pId) {
      case 0:
        return null;
</xsl:text>
  <xsl:for-each select="$generate-entity/enumeration-entries/enumeration-entry[@generate='true']">
    <xsl:sort select="@identifier"/>
    <xsl:text>      case </xsl:text><xsl:value-of select="@id"/><xsl:text>:
        return </xsl:text><xsl:value-of select="@identifier"/><xsl:text>;
</xsl:text>
  </xsl:for-each>
  <xsl:text>      default:
        throw new IllegalArgumentException("Invalid enumeration ID: " + pId);
    }
  }

</xsl:text>

</xsl:template>


<!-- equals/hashcode methods -->
<xsl:template match="entity" mode="equals-hashcode">

  <xsl:if test="$generate-comments">
    <xsl:text>  /**
   * Checks equality for two entities.
   * Entities of same type are compared using their primery keys.
   * If the entity is not saved yet, the comparison is done by checking for object identity.
   * @param pOther Other object
   * @return true if entities are equal
   */
</xsl:text>
  </xsl:if>
  <xsl:text>  @Override
  public boolean equals(Object pOther) {
    if (pOther == null || !(pOther instanceof </xsl:text><xsl:value-of select="$entity"/><xsl:text>)) {
      return false;
    }
    if (getId() == 0) {
      return this == pOther;
    }
    return getId() == ((</xsl:text><xsl:value-of select="$entity"/><xsl:text>)pOther).getId();
  }

</xsl:text>

  <xsl:if test="$generate-comments">
  <xsl:text>  /**
   * Generate hashcode for entity.
   * Uses combination of class name hashcode and primary key to construct hascode value.
   * Please note: Hashcode will change if a newly created object is saved first time in database.
   * @return hashcode
   */
</xsl:text>
  </xsl:if>
  <xsl:text>  @Override
  public int hashCode() {
    int result = 17;
    result = 37*result + getClass().hashCode();
    result = 37*result + getId();
    return result;
  }

</xsl:text>

</xsl:template>


</xsl:stylesheet>
